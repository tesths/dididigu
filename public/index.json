[{"content":"7.10 更新 目前只需要在捷径最前面填写即可。详情见图！\n6.2 更新 Story 下载两个地方都需要增加 Cookie 啦，见截图。\n5.24 更新 Instagram 单独下载一条也需要登录了，单独下载一条设置 Cookie 的方式同 Story。\n在查询了一些资料之后，我找到了 Instagram Story 的下载方式，并根据这个方式完成了 Workflow 的版本。感谢 instastories-backup项目。\n原理 Instagram 是需要登录验证的，但实际经过我的测试，Instagram 只会检测 cookie 和 user-agent。那么只要在网络请求的 headers 加入 cookie 和 user-agent 实际上就可以了。\nuser-agent 是可以直接伪造的，而 cookie 值，需要通过网络版本的 chrome 获取。\n在这个地方，cookie 建议使用自己的，或者是专门注册一个帐号用于下载。如果 cookie 泄露，理论上可以利用 cookie 对相应的用户进行数据篡改。\n获取 cookie 打开 Chrome，进入到 www.instagram.com 并登录。\nWindows 用户按 f12，Mac 用户按 option+cmd+j，打开控制台。\n此时刷新页面，找到 www.instagram.com 的请求。找到 cookie，然后找到 sessionid。复制这串 140122\u0026hellip; （这串数字+字母+符号，每个人不同，有人可能是 5124\u0026hellip;等）如图所示。\n然后把这么一长串，粘贴到捷径中最开始的 sessionid= 后面即可进行下载操作。\n普通下载版本截图 Story 版本下载截图 注意事项 cookie 一定不能泄漏，不然会造成安全问题。\n每个 cookie 的有效期是 90 天，需要时常更新。\n这里通过的是 Instagram 的私有 API 进行操作，所以 workflow 单人单用以免出现滥用。\n","permalink":"http://localhost:1313/posts/ios-shortcuts-download-instagram-image/","summary":"7.10 更新 目前只需要在捷径最前面填写即可。详情见图！\n6.2 更新 Story 下载两个地方都需要增加 Cookie 啦，见截图。\n5.24 更新 Instagram 单独下载一条也需要登录了，单独下载一条设置 Cookie 的方式同 Story。\n在查询了一些资料之后，我找到了 Instagram Story 的下载方式，并根据这个方式完成了 Workflow 的版本。感谢 instastories-backup项目。\n原理 Instagram 是需要登录验证的，但实际经过我的测试，Instagram 只会检测 cookie 和 user-agent。那么只要在网络请求的 headers 加入 cookie 和 user-agent 实际上就可以了。\nuser-agent 是可以直接伪造的，而 cookie 值，需要通过网络版本的 chrome 获取。\n在这个地方，cookie 建议使用自己的，或者是专门注册一个帐号用于下载。如果 cookie 泄露，理论上可以利用 cookie 对相应的用户进行数据篡改。\n获取 cookie 打开 Chrome，进入到 www.instagram.com 并登录。\nWindows 用户按 f12，Mac 用户按 option+cmd+j，打开控制台。\n此时刷新页面，找到 www.instagram.com 的请求。找到 cookie，然后找到 sessionid。复制这串 140122\u0026hellip; （这串数字+字母+符号，每个人不同，有人可能是 5124\u0026hellip;等）如图所示。\n然后把这么一长串，粘贴到捷径中最开始的 sessionid= 后面即可进行下载操作。","title":"快捷指令下载 Instagram 图像及 Story（7.10 更新）"},{"content":"距离上次写博客过去了一个月。这一个月经历了挣扎的上架 MAS。还好我没放弃，终于在昨天上架了 MAS。\n我将凭借我的记忆来叙述这个上架过程中一些对于沙盒机制的理解。以及整个上线过程中存在的坑。\n第三方 executable file 的签名 上文提到，我在整个软件的压制过程中，使用的是 ffmpeg 官网的可执行文件压制。而像 Mac 上著名的 INNA 是采用的 ffmpeg 的 .h 头文件 + 部分 objective-c 代码来实现部分和 ffmpeg 相关的代码。\n我承认我不是一个好的工程师，我也承认我觉得使用 ffmpeg 的 c 文件进行二次开发是更好的选择。但是如果我把我的精力放在研究 c 代码上，那这个工程量对于我来说太大，以及我觉得直接使用 ffmpeg 并不是不可以。\n那么采用 ffmpeg 可执行文件作为我们的主要工具，就有一个很重要的问题，那就是 ffmpeg 的签名问题。MAS 版本的所有文件都要求进行签名，我第一次无法上传到 MAS 的问题就是 ffmpeg 没有签名。这里的签名就直接使用 codesign 签名是可以的。除此之外，对于 ffmpeg 要求有一个单独的 entitlement 文件，而这个文件里面应该填写的是\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;com.apple.security.inherit\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;com.apple.security.app-sandbox\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 然后在签名的使用 codesign 和 entitlement 签名。\n这就完成了第一步，对于第三方可执行文件的签名，如果这个地方没有签名，连上传到 MAS 都是会被阻碍的。\n如何理解沙盒机制 我将用五次被拒绝的经历来说明我对沙盒机制的理解。\n第 0 次被拒（构建版本不显示图标） 在我完成第一次上传之后，我的构建版本处一直不显示图标，这和之前的情况是不一样的。这个地方的坑在于可以使用构建版本，但是就是不显示图标\u0026hellip;因为我之前经历过不显示图标的问题，最终联系了苹果客服才知道调用了私有 API，但是这次确实是一切正常，就是不显示图标。这个坑经历的时间最长，让我一直觉得是我调用了不该调用的接口。\n第 1 次被拒 7月7日 提交苹果审核之后，我的第一次拒绝在 7.7 这一天出现了。\n主要问题如下图。\n为了可以让搜索引擎更好的搜索到相同的问题，我把文字版本的关键部分贴出来\nSpecifically, we found that when the user closes the main application window there is no menu item to re-open it.\n第一个问题好解决，不支持 MOV 的问题，我在 drag and drop 里增加一个判断就解决了。这个 window reopen 的问题我开始着手解决。\n在苹果的 Human Interface Guidelines 里是可以使用点击 Dock 图标来打开的，于是我增加了点击 Dock 图标的方法。\n于此我的两个问题全部解决，重新提交审核。\n第 2 次被拒 7月9日 主要问题如下图。\n第一个和第二个问题的关键部分\ncom.apple.security.files.downloads.read-write 和 com.apple.security.files.user-selected.executable 这两个 entitlement 文件的声明。\n第三个还是 re-open window 的问题。\n我认为 Download 文件夹是可以随意使用的，而且我已经可以点击 Dock 打开了。于是向苹果方发了一个回执。\n`\nThe download folder is the default folder to save the compressed video. So I need the download folder to write permission. And I think the right folder path is /Users/username/Downloads. The reopening event is resolved by add makeKeyAndOrderFront in Appdelegate. If the user closes the window, he can reopen it by click docker icon. And I already test it. ` 然后苹果给我了一个详细的回复\nThe Downloads folder is only appropriate for items downloaded from the Internet. Additionally, clicking the Dock icon is an insufficient means of restoring the Main Window. We advise implementing a menu item. We look forward to reviewing your revised binary.\nDownload 文件夹的使用权，只有当具备下载功能的时候才可以使用。而苹果认为，单个窗口的应用，点击 Dock 是一个没效率的打开操作，建议使用快捷键打开。\n于是在这个地方，我把 Download 文件夹换成了 Movie 文件夹，然后参考了 CurrencyX 的方案，在 Menu 里加了一个快捷键启动窗口的方法。重新提交审核。\n第 3 次被拒 7月11日 主要问题如下图。\n第一个和第二个问题的关键部分。\n关键字\ncom.apple.security.files.user-selected.executable 和 com.apple.security.assets.movies.read-write: Yes\n我依然没有解决 executable 的问题，以及在苹果看来 movies 也是不可以被读写的。\n我删除了 entitlement 中 com.apple.security.files.user-selected.executable。重新提交审核。\n第 4 次被拒 7月11日 主要问题如下图。\n第一个和第二个问题的关键部分。\n关键字\ncom.apple.security.assets.movies.read-write: Yes\n在这个地方我将 com.apple.security.assets.movies.read-write 删除，然后将压制文件的默认文件夹放在了沙盒里的 cache 文件夹。\n第 5 次被拒 7月13日 主要问题如下图。\n问题关键部分。\n关键字\nYour app saves user data to the app's container, which is not user accessible, as documented in the \u0026quot;Container Directories and File System Access\u0026quot; of App Sandbox Design Guide: \u0026quot;The container is in a hidden location, and so users do not interact with it directly. Specifically, the container is not for user documents. It is for files that your app uses, along with databases, caches, and other app-specific data.\u0026quot;\n于是在这个地方，我把存储位置设置为一个 NSOpenPanel，让用户选择存储位置，重新提交审核。\n终于审核通过。\n总结 我们来复盘整个过程。总的来说是对 MAS 的沙盒机制理解不清楚。下面我将总结及说明。\n首先我们先说沙盒无关的，就是苹果认为，我们应该在 menubar 设置一个可以打开窗口的方案。或者你就直接把它关掉。\n其次是沙盒问题，在 MAS 的沙盒机制中，Download 文件夹和 Movie 文件夹是不可以被随意使用的，Download 文件夹只有下载功能才可以，而如果使用了 Movie 文件，那么 iTunes 的 movie 也是可以被使用的。（第 2 次和第 3 次和第 4 次被拒绝的原因）\ncom.apple.security.files.user-selected.executable 这个是只有当你的应用需要创建可执行文件，这个可执行文件用于启动服务等的时候才能使用。（第 2 次和第 3 次和第 4 次被拒绝的原因）\n沙盒内部的文件，只能被写，不能被用户读取。（第 5 次被拒绝的理由）\n还有一个关键的问题在于，MAS 沙盒默认会获得你从 NSOpenPanel 读取的那个文件夹的权限，而 Drag 和 Recent 的是沙盒获得了操作这个文件的权限，而不是文件夹！\n所以当我使用 Drag and Drop 的时候是无法写文件的，而当我使用 NSOpenPanel 时候就可以。\n最后 PineconeSuppress 已经上架 MAS。地址是 PineconeSuppress。\n同时开发计划将逐步开放在 trello。\n如果有任何问题，欢迎留言。\n参考资料 mac-os-app-sandbox-with-command-line-tool\n在 Sandboxed Mac App 中嵌入第三方可执行文件\nApp Sandbox in Depth\nEnabling App Sandbox\n","permalink":"http://localhost:1313/posts/mac-app-upload-and-sandbox-notes/","summary":"距离上次写博客过去了一个月。这一个月经历了挣扎的上架 MAS。还好我没放弃，终于在昨天上架了 MAS。\n我将凭借我的记忆来叙述这个上架过程中一些对于沙盒机制的理解。以及整个上线过程中存在的坑。\n第三方 executable file 的签名 上文提到，我在整个软件的压制过程中，使用的是 ffmpeg 官网的可执行文件压制。而像 Mac 上著名的 INNA 是采用的 ffmpeg 的 .h 头文件 + 部分 objective-c 代码来实现部分和 ffmpeg 相关的代码。\n我承认我不是一个好的工程师，我也承认我觉得使用 ffmpeg 的 c 文件进行二次开发是更好的选择。但是如果我把我的精力放在研究 c 代码上，那这个工程量对于我来说太大，以及我觉得直接使用 ffmpeg 并不是不可以。\n那么采用 ffmpeg 可执行文件作为我们的主要工具，就有一个很重要的问题，那就是 ffmpeg 的签名问题。MAS 版本的所有文件都要求进行签名，我第一次无法上传到 MAS 的问题就是 ffmpeg 没有签名。这里的签名就直接使用 codesign 签名是可以的。除此之外，对于 ffmpeg 要求有一个单独的 entitlement 文件，而这个文件里面应该填写的是\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;com.apple.security.inherit\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;com.apple.security.app-sandbox\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 然后在签名的使用 codesign 和 entitlement 签名。","title":"松果压制上架 Mac App Store 及沙盒机制的部分说明"},{"content":"上次写完推文之后发现压制还是很麻烦，转念一想，要么自己做一个 GUI 的吧，于是有了将近三星期零零散散的开发。\n下面把我开发的过程记录下。\n如何使用 ffmpeg 在 iOS 开发中，ffmpeg 是使用编译过的文件进行开发。而在 Mac 中，我查阅了一部分资料，（可能是我花的时间太少），最后查询的结果是直接使用可执行文件。\n这里就很简单了，直接把 ffmpeg 拖进工程，然后使用 nstask 来调用就可以了。\ndrag and drop drag and drop 是这种程序标配的了。好在 drag and drop 有很多学习资料。文章最后会放上我查阅的一些资料。\n小细节 有很多小坑是我整个过程中踩的，比如 NSButton 的文字居中。比如 nstask 的暂停。我使用了别人的代码，但是发现变量初始化有问题。排查了半天。\n开源 根据我的预期，这个项目是会开源的\u0026hellip;但不是在现在。大概我测试写完会开源出去。所以多的就不写了。反正这个代码写的也不咋样，但是效果还凑合！\n就这。\n参考资料 Drag and Drop Tutorial for macOS\nNSTask Tutorial for OS X\nImplementing a drag-and-drop zone in Swift\nYoutubeDownloader\n","permalink":"http://localhost:1313/posts/mac-cocoa-use-ffmpeg/","summary":"上次写完推文之后发现压制还是很麻烦，转念一想，要么自己做一个 GUI 的吧，于是有了将近三星期零零散散的开发。\n下面把我开发的过程记录下。\n如何使用 ffmpeg 在 iOS 开发中，ffmpeg 是使用编译过的文件进行开发。而在 Mac 中，我查阅了一部分资料，（可能是我花的时间太少），最后查询的结果是直接使用可执行文件。\n这里就很简单了，直接把 ffmpeg 拖进工程，然后使用 nstask 来调用就可以了。\ndrag and drop drag and drop 是这种程序标配的了。好在 drag and drop 有很多学习资料。文章最后会放上我查阅的一些资料。\n小细节 有很多小坑是我整个过程中踩的，比如 NSButton 的文字居中。比如 nstask 的暂停。我使用了别人的代码，但是发现变量初始化有问题。排查了半天。\n开源 根据我的预期，这个项目是会开源的\u0026hellip;但不是在现在。大概我测试写完会开源出去。所以多的就不写了。反正这个代码写的也不咋样，但是效果还凑合！\n就这。\n参考资料 Drag and Drop Tutorial for macOS\nNSTask Tutorial for OS X\nImplementing a drag-and-drop zone in Swift\nYoutubeDownloader","title":"Cocoa 封装 ffmpeg"},{"content":" 本文将不定期补充 ffmpeg 其余压制方案或者命令行使用方法\n如果有在 Mac 下压制字幕需求的话，可以直接在 Mac App Store 搜索 PineconeSuppress。我将 ffmpeg 进行了可视化的封装，可以更加轻松的在 Mac 下压制字幕哦~\n这篇博客要感谢蒸包同志！没有蒸包同志的教学就没有这篇博客的输出。以及，要说难确实也有点难度，要说不难，我真的很努力写的白话文加配图了。以及如果需求大我会开发 Mac 可视化版本的压制软件\u0026hellip;这是后话。\n问题 大部分字幕组做视频压制，标准配备都是 Windows 版本的小丸工具箱。但是小丸工具箱的 Mac 版本没有 Windows 那么好。其次的问题是怎么 Mac 怎么打 logo。在我们组内使用 Aegisub 打 logo。使用 Aegisub 打 logo 的话，需要给 Aegisub 安装 vsflitermod 插件，这玩意没有 Mac 的。最后的问题是，Mac 下没有好的压制工具。\n工具问题 小丸实际上是针对 ffmpeg 进行了图像化的封装。那么原理上我们只要会 ffmpeg 就可以在 Mac 上达到相同的功能。而 Mac 下没有很好的 ffmpeg 的图形化客户端。那没办法，只有用命令行了。（如果需求量大我考虑下自己开发一个图形化的，但是目前还不会）\n预备 首先需要下载一个 ffmpeg 在 Mac 下的可执行文件。https://evermeet.cx/ffmpeg/ 这个是 ffmpeg 官网跳转的链接。下载右下角的（其实都可以）。\n之后解压缩文件，会得到一个下图这样黑黑的东西。\n我的建议是建一个单独的文件夹。把这个 ffmpeg 放进去。然后的话就需要一点点计算机的知识了\u0026hellip;没有很难，我也会尽量阐述的可以理解一点，而且全部配图。我也基本保证就这一点点专业性的东西。\n首先在电脑里找到 Terminal。\n这时候要看下 ffmpeg 在哪个文件夹，比如我的 ffmpeg 在 Document 下的 ffmpeg 里。那么就输入命令，cd Documents/ffmpeg/。cd 的意思就是进入某个文件夹的意思。我们这里就是进入了 ffmpeg 的文件夹\n这个时候再输入一个命令 ls。ls 的意思是显示这个文件夹下所有的文件。可以看我的配图。到这步在 Terminal 看到有 ffmpeg 就可以了。然后点这个 \brender.sh网页，就会自动下载一个文件，将这个文件放到和 ffmpeg 一个文件夹就可以啦。如下图。\n使用 使用方案，需要用哪一个方法，就把最前面的 # 号去掉。中文那行不能注释。**以及记得把视频 ass 还有 logo 的图都和那个黑色的 ffmpeg 放在一起。**下文有详细图。\n把需要的方案注释之后，在 Terminal 里运行 bash render.sh。就会开始压制了。\nrender.sh 里定义了几个方法。\n1.转换视频格式\n把 in 改成你的视频名字，out 改成输出的视频名称即可。\n比如我想把 wake.mp4 换成 mkv。就改为。\n./ffmpeg -i \u0026quot;wake1.mp4\u0026quot; wake.mkv\n2.压制 srt 字幕\n把 in.mp4 换成你的 mp4，把 xx.srt 换成你的 srt 文件，out.mp4 换成你需要的名字。\n3.压制 ass 字幕\n把 in.mp4 换成你的 mp4\n把 xx.srt 换成你的 ass 文件\nout.mp4 换成你需要的名字。如下图。\n压制完成后就会是。\n4.压制带 logo 的（logo 在上 ass 字幕在下）\n**这里的 logo 在上 ass 在下，是指如果 logo 和滚轴重复在一起，哪一个在上面。**下文有反着的。\n由于我上文提到的，Mac 下的 Aegisub 插件是没有的，那我们可以利用 ffmpeg 来压制。将 logo 文件放在 ffmpeg 文件夹下。\nwakemeup1.mp4 换成你的 mp4 文件名\nlogo-small.png 换成你的 logo 图片\nwakemeup1.ass 换成你的 ass 文件\noverlay=1060:70 这里的 1060:70 是距离屏幕左边 1060 的位置，距离屏幕上面 70 的位置。可以在 Aegisub 确定好在填写。可以参考 如何在ASS字幕中插入各种图片，里面的 {\\p1\\1img\\bord0\\shad0\\(logo-small.png\\pos(1123,166.99)}m 0 0 l 0 120 l 240 120 l 240 0 方案。先确定 logo 位置，填写到这里。\n直接在 Aegisub 上比对下也行。\n5.压制带 logo 的（ass 字幕在上 logo 在下）\n同上。\n6.压制延迟出现 logo 的\n大部分同上。\n出现时间修改。\nenable='between(t,35,6*60+30)'\n我现在想从第 10 秒到最后，假设影片长度 120 秒。那么修改 为 enable='between(t,10,120)'。即修改两个数字即可。\n\b总结一下就是。准备需要的 mp4，ass，logo，然后修改 render.sh 文件。以及在 Terminal 运行 bash render.sh\n注意事项 render.sh 文件中如果多行的话，多行都需要注释，如我的图。 需要使用哪个则把前面的 # 去掉，其他的还得用 # 弄上。 如果使用中遇到错误请发邮件给我，虽然我不一定可以解决，但是可以试试看。邮箱是 tesths@yahoo.com。 如果你有更好的方案也欢迎留言或者给我发邮件。 以及有什么不明白的，留言和发邮件都可以。 以及这一套是可以完全用在 Windows 上的。 以上。 ","permalink":"http://localhost:1313/posts/mac-ffmpeg-subtitle-and-logo/","summary":"本文将不定期补充 ffmpeg 其余压制方案或者命令行使用方法\n如果有在 Mac 下压制字幕需求的话，可以直接在 Mac App Store 搜索 PineconeSuppress。我将 ffmpeg 进行了可视化的封装，可以更加轻松的在 Mac 下压制字幕哦~\n这篇博客要感谢蒸包同志！没有蒸包同志的教学就没有这篇博客的输出。以及，要说难确实也有点难度，要说不难，我真的很努力写的白话文加配图了。以及如果需求大我会开发 Mac 可视化版本的压制软件\u0026hellip;这是后话。\n问题 大部分字幕组做视频压制，标准配备都是 Windows 版本的小丸工具箱。但是小丸工具箱的 Mac 版本没有 Windows 那么好。其次的问题是怎么 Mac 怎么打 logo。在我们组内使用 Aegisub 打 logo。使用 Aegisub 打 logo 的话，需要给 Aegisub 安装 vsflitermod 插件，这玩意没有 Mac 的。最后的问题是，Mac 下没有好的压制工具。\n工具问题 小丸实际上是针对 ffmpeg 进行了图像化的封装。那么原理上我们只要会 ffmpeg 就可以在 Mac 上达到相同的功能。而 Mac 下没有很好的 ffmpeg 的图形化客户端。那没办法，只有用命令行了。（如果需求量大我考虑下自己开发一个图形化的，但是目前还不会）\n预备 首先需要下载一个 ffmpeg 在 Mac 下的可执行文件。https://evermeet.cx/ffmpeg/ 这个是 ffmpeg 官网跳转的链接。下载右下角的（其实都可以）。\n之后解压缩文件，会得到一个下图这样黑黑的东西。\n我的建议是建一个单独的文件夹。把这个 ffmpeg 放进去。然后的话就需要一点点计算机的知识了\u0026hellip;没有很难，我也会尽量阐述的可以理解一点，而且全部配图。我也基本保证就这一点点专业性的东西。\n首先在电脑里找到 Terminal。","title":"Mac 下压制字幕和 logo"},{"content":"最近给单位在做小程序，中间需要使用自定义字体。稍微梳理下整个过程。\n起因 在小程序中是可以使用 font-family 属性的，但是官方没有给出有哪些 font 是可以选用的，所以我们无法知道小程序到底可以支持哪些内置的字体。自定义字体就成为了一个问题。\n小程序本身不支持将字体拖进去，然后通过引用的方式来使用字体。即使可以，一个思源字体随便都 10MB，拖进去之后整个大小就超过了小程序的 2MB 限制。\n在网上查找之后还有一个方案，就是使用在线的 transfonter.org 将字体转换成 base64 的方式。有使用 base64 的方案，但是还是会超过大小。而且 transfonter.org 对字体的大小本身还存在限制。这就是很麻烦的一件事情。\n解决方案 那么如何解决呢？我这里提供两个方案。\n一是通过在线应用 url 的方式。\n这种方案就是将字体文件存在文件服务器上，通过地址的方案引到小程序中，比如我下午使用的 http://o9791noio.bkt.clouddn.com/songti.TTF 这个网址，是七牛的，可以使用！而且这种方案在 zanui-weapp 的 issue 是有人提到的，链接是 使用\u0026quot;单元格\u0026quot;时，icon无法使用，但是我在真机测试的时候不可以，没有具体排查。我觉得问题的原因有两个，一是网上有些资料说 iOS 必须使用 https，二还是最根本的字体大小的问题，如果字体太大，模拟器就会有错误提示，真机在最开始如果没有加载也会非常麻烦。总之这个方案目前是被我 pass 的。\n二就是下面我现在使用的我觉得合理的方案。上 字蛛。当然这个也不是最好的解决方案。\n根据我的需求，我需要的个性化字体都是写死了，就是不需要网络加载。那么就可以采用字蛛对字体进行压缩。字蛛会把 html 中用到的字进行提取和压缩，用不到的就 pass 掉。这样会给原来的 ttf 文件进行一个强力的压缩，比如我压缩之后整个 ttf 文件的大小就变成了 8kb。这个效果还是显而易见的，这个时候再采用 transfonter.org 将字体转换为 base64 就可以了。\n脑洞 那么假设一下一个情况，如果需要的是动态字体怎么办？\n虽然我暂时还没有这个需求，我想到的方案是，首先后台会将专门的字体进行一个标记，那么在标记之后，使用 font-spider 将原字体进行压缩，再使用 url 获取的方式来动态加载，由于这个时候的字体文件很小，那么就不会有字体太大手机端加载不出来的情况。\n或者就是直接把常用字进行 base64 加密，就省去了网络获取的问题了。\n非常想知道青芒杂志咋弄的 哈哈。\n","permalink":"http://localhost:1313/posts/custom-miniprogram-font/","summary":"最近给单位在做小程序，中间需要使用自定义字体。稍微梳理下整个过程。\n起因 在小程序中是可以使用 font-family 属性的，但是官方没有给出有哪些 font 是可以选用的，所以我们无法知道小程序到底可以支持哪些内置的字体。自定义字体就成为了一个问题。\n小程序本身不支持将字体拖进去，然后通过引用的方式来使用字体。即使可以，一个思源字体随便都 10MB，拖进去之后整个大小就超过了小程序的 2MB 限制。\n在网上查找之后还有一个方案，就是使用在线的 transfonter.org 将字体转换成 base64 的方式。有使用 base64 的方案，但是还是会超过大小。而且 transfonter.org 对字体的大小本身还存在限制。这就是很麻烦的一件事情。\n解决方案 那么如何解决呢？我这里提供两个方案。\n一是通过在线应用 url 的方式。\n这种方案就是将字体文件存在文件服务器上，通过地址的方案引到小程序中，比如我下午使用的 http://o9791noio.bkt.clouddn.com/songti.TTF 这个网址，是七牛的，可以使用！而且这种方案在 zanui-weapp 的 issue 是有人提到的，链接是 使用\u0026quot;单元格\u0026quot;时，icon无法使用，但是我在真机测试的时候不可以，没有具体排查。我觉得问题的原因有两个，一是网上有些资料说 iOS 必须使用 https，二还是最根本的字体大小的问题，如果字体太大，模拟器就会有错误提示，真机在最开始如果没有加载也会非常麻烦。总之这个方案目前是被我 pass 的。\n二就是下面我现在使用的我觉得合理的方案。上 字蛛。当然这个也不是最好的解决方案。\n根据我的需求，我需要的个性化字体都是写死了，就是不需要网络加载。那么就可以采用字蛛对字体进行压缩。字蛛会把 html 中用到的字进行提取和压缩，用不到的就 pass 掉。这样会给原来的 ttf 文件进行一个强力的压缩，比如我压缩之后整个 ttf 文件的大小就变成了 8kb。这个效果还是显而易见的，这个时候再采用 transfonter.org 将字体转换为 base64 就可以了。\n脑洞 那么假设一下一个情况，如果需要的是动态字体怎么办？\n虽然我暂时还没有这个需求，我想到的方案是，首先后台会将专门的字体进行一个标记，那么在标记之后，使用 font-spider 将原字体进行压缩，再使用 url 获取的方式来动态加载，由于这个时候的字体文件很小，那么就不会有字体太大手机端加载不出来的情况。\n或者就是直接把常用字进行 base64 加密，就省去了网络获取的问题了。\n非常想知道青芒杂志咋弄的 哈哈。","title":"微信小程序自定义字体"},{"content":"本文没有深入探讨 ruby 的内存管理问题，本人水平有限，没有去深入看内存管理，而且我现在主要需要实现功能，这里只谈我是怎么解决问题的。\n起因 提到内存泄漏，这是个非常麻烦以及难以解决的问题，ruby 是自动回收内存，不是像 c 一样手动回收，虽然大部分语言现在都是这样，但是这就导致一个非常麻烦的问题，内存泄漏怎么办。我在解决这个问题的时候心里是有阴影的，因为之前写过一个 swift 的图表动画，运行几次之后就变的特别卡。一直也没有找到原因，后来换了一种非常啰嗦的写法才解决。所以这次是心有余悸的。\n事情的起端是我写了一个定时爬取数据的 ruby 程序。基本思路是用 ruby 来调用 python 脚本。然后通过 ruby 的 activerecord 存入数据库。为什么不用 python 直接存数据非得用 ruby 绕一下的理由是，activerocord 很好用，以及我想熟悉 ruby 栈，最后是这样可以和我的服务器 activerecord 无缝对接上，所以就用 ruby 了。\n我的需求是每个整点的第 22 分钟时运行一次，这里使用了 ruby 的 rufus-scheduler，在这个 gem 里有一个是调用 cron。但是问题在于，真的调用 cron 了吗？我没有看源代码，但是最终根据我内存泄漏的原因，我分析是没有的。起因就是，我把程序上传到服务器上，每次运行 3-4 天之后服务器就无法 ssh，但是可以 ping。查了一下觉得有可能是内存泄漏，于是开始了排查。\n排查 一开始我傻不拉唧直接在服务器上看内存使用。\n1.CPU占用最多的前10个进程： ps auxw|head -1;ps auxw|sort -rn -k3|head -10 2.内存消耗最多的前10个进程 ps auxw|head -1;ps auxw|sort -rn -k4|head -10 3.虚拟内存使用最多的前10个进程 ps auxw|head -1;ps auxw|sort -rn -k5|head -10 我这里使用了第 2 个。但是这个方法是很傻的，因为你不可能每小时都登服务器，只能大概判断，不过我间隔了一段时间登录之后发现确实程序内存使用上升。于是切换到本地测试。\n我把定时任务换成了一个 while 循环，使用了一个函数\ndef report p \u0026#39;Memory \u0026#39; + `ps ax -o pid,rss | grep -E \u0026#34;^[[:space:]]*#{$$}\u0026#34;` .strip.split.map(\u0026amp;:to_i)[1].to_s + \u0026#39;KB\u0026#39; end 这个程序运行一段时间就会发现内存是在增长的，虽然当内存变大，ruby 的自动回收机制会让内存变小，但是总体还是在不断变大。\n解决 于是就需要开始排查到底是哪泄漏了。这里用到的 gem 是 memory_profiler。这里要注意，不能写成死循环检测，也不能循环次数太多检测，不然依然会导致内存使用过高。这是我遇到的坑。\n使用 memory_profiler 之后，它会显示 retain 的 object，超级神奇！还会显示内存泄漏的行数。我就不阐述了，非常直观明了。\n我的问题在于 ruby 调用 JSON 解析和 Time 的时候。\nallData = JSON.parse(result) current_time = Time.now.strftime(\u0026#34;%H\u0026#34;) 这里实际上 allData 和 current_time 都已经是对象了。而 rufus-scheduler 并没有真正的调用 cron。所以导致每个小时都有 allData 和 current_time。即使内存回收，这个地方也是不会完全回收。\n解决方案很简单，加一个 = nil 就 ok。至少目前我修改过的程序已经运行 3 天内存依然比较稳定，希望一直稳定下去\u0026hellip;\n以上。\n","permalink":"http://localhost:1313/posts/search-for-ruby-memory/","summary":"本文没有深入探讨 ruby 的内存管理问题，本人水平有限，没有去深入看内存管理，而且我现在主要需要实现功能，这里只谈我是怎么解决问题的。\n起因 提到内存泄漏，这是个非常麻烦以及难以解决的问题，ruby 是自动回收内存，不是像 c 一样手动回收，虽然大部分语言现在都是这样，但是这就导致一个非常麻烦的问题，内存泄漏怎么办。我在解决这个问题的时候心里是有阴影的，因为之前写过一个 swift 的图表动画，运行几次之后就变的特别卡。一直也没有找到原因，后来换了一种非常啰嗦的写法才解决。所以这次是心有余悸的。\n事情的起端是我写了一个定时爬取数据的 ruby 程序。基本思路是用 ruby 来调用 python 脚本。然后通过 ruby 的 activerecord 存入数据库。为什么不用 python 直接存数据非得用 ruby 绕一下的理由是，activerocord 很好用，以及我想熟悉 ruby 栈，最后是这样可以和我的服务器 activerecord 无缝对接上，所以就用 ruby 了。\n我的需求是每个整点的第 22 分钟时运行一次，这里使用了 ruby 的 rufus-scheduler，在这个 gem 里有一个是调用 cron。但是问题在于，真的调用 cron 了吗？我没有看源代码，但是最终根据我内存泄漏的原因，我分析是没有的。起因就是，我把程序上传到服务器上，每次运行 3-4 天之后服务器就无法 ssh，但是可以 ping。查了一下觉得有可能是内存泄漏，于是开始了排查。\n排查 一开始我傻不拉唧直接在服务器上看内存使用。\n1.CPU占用最多的前10个进程： ps auxw|head -1;ps auxw|sort -rn -k3|head -10 2.内存消耗最多的前10个进程 ps auxw|head -1;ps auxw|sort -rn -k4|head -10 3.虚拟内存使用最多的前10个进程 ps auxw|head -1;ps auxw|sort -rn -k5|head -10 我这里使用了第 2 个。但是这个方法是很傻的，因为你不可能每小时都登服务器，只能大概判断，不过我间隔了一段时间登录之后发现确实程序内存使用上升。于是切换到本地测试。","title":"查找 ruby 内存泄漏"},{"content":"最近由于某些需要。需要关注 Instagram 的博主，ins 本身是提供了推送服务的，但是由于各种原因，经常收不到推送，这就需要自己采取爬虫的形式。\n推送服务 推送服务有很多选择，除了国内的平台都可以。我在这里采取了比较灵活的 telegram bot。tg 是一款很伟大的产品，很简单的方式就可以对接机器人自动发布消息。\n我采用了 telegram-bot-ruby 这个 gem，来将 ruby 脚本和 tg 联系起来。\n虽然我更推荐你们使用 python 或者 php，在 GitHub 上有很多和 ins 相关的 python 的库，甚至可以调用到 ins 私有的 api 接口。由于我最近的技术栈都是 ruby 所以就采用了 ruby。\n爬虫获取 ins 自身的网络请求是 api 分离的，这意味着如果爬虫爬取到了 json 接口之后可以直接获取 json 的数据。只需要在所有的 url 后面加上 ?__a=1 即可获得 json 格式的数据。\n爬虫方案 我采取的方案是每 5s 请求一次。对比前一次和这一次的区别。这里就不详细叙述了。\n网络请求优化及异常处理 由于我的程序一开始写的不够规范，导致重复请求过多。而 instagram 对于请求频率过于高的 ip 会返回 429 错误。429 是请求次数过多。\n而在请求错误过多的情况下，会导致异常处理。这里我采取 try catch 的方案。\n在逐步优化后我的爬虫现在平均每分钟运行 12 次。已经处于不会被封的范围内了。\n小彩蛋 graphql 已经被 Instagram 采用。突然有一天的接口全部是 graphql 了。导致的就是需要重新修改 json 的解析。现在的解析还是有点复杂的。\n开源 我已经将代码开源在 https://gist.github.com/tesths/24b211eeae5acd5097e3efd647057acb。由于之前写的还有很多 try catch 的异常没有完全写进去，但是因为已经基本满足我的使用需要所以就没有继续完善。\n","permalink":"http://localhost:1313/posts/fixed-instagram-push-problem/","summary":"最近由于某些需要。需要关注 Instagram 的博主，ins 本身是提供了推送服务的，但是由于各种原因，经常收不到推送，这就需要自己采取爬虫的形式。\n推送服务 推送服务有很多选择，除了国内的平台都可以。我在这里采取了比较灵活的 telegram bot。tg 是一款很伟大的产品，很简单的方式就可以对接机器人自动发布消息。\n我采用了 telegram-bot-ruby 这个 gem，来将 ruby 脚本和 tg 联系起来。\n虽然我更推荐你们使用 python 或者 php，在 GitHub 上有很多和 ins 相关的 python 的库，甚至可以调用到 ins 私有的 api 接口。由于我最近的技术栈都是 ruby 所以就采用了 ruby。\n爬虫获取 ins 自身的网络请求是 api 分离的，这意味着如果爬虫爬取到了 json 接口之后可以直接获取 json 的数据。只需要在所有的 url 后面加上 ?__a=1 即可获得 json 格式的数据。\n爬虫方案 我采取的方案是每 5s 请求一次。对比前一次和这一次的区别。这里就不详细叙述了。\n网络请求优化及异常处理 由于我的程序一开始写的不够规范，导致重复请求过多。而 instagram 对于请求频率过于高的 ip 会返回 429 错误。429 是请求次数过多。\n而在请求错误过多的情况下，会导致异常处理。这里我采取 try catch 的方案。\n在逐步优化后我的爬虫现在平均每分钟运行 12 次。已经处于不会被封的范围内了。\n小彩蛋 graphql 已经被 Instagram 采用。突然有一天的接口全部是 graphql 了。导致的就是需要重新修改 json 的解析。现在的解析还是有点复杂的。","title":"浅谈解决 Instagram 推送失效的问题"},{"content":"需要的东西 Codeanywhere 账号注册（用于 Heroku 环境配置） Heroku 账号注册 部分说明 由于 Huginn 是基于 Ruby 的，所以需要配置 Ruby 的环境。我们这里使用 Codeanywhere，就省去了配置 Ruby 环境。 Cloud9 是一个云端的 IDE，配置好了安装 Huginn 的所有环境，但是注册需要信用卡。（如果你有信用卡我推荐你使用这个。）我们这里使用 Codeanywhere，二者没有特别大的区别，Codeanywhere 比 Cloud9 少了 Heroku 的环境，我会详细说明如何在 Codeanywhere 上配置 Heroku 的环境。 部署步骤 登陆 Huginn Github 主页的 Deployment 部分，找到 Heroku 的按钮。然后点击，就会跳转到你的 Heroku 了。 点完按钮之后会跳转到你的 Heroku 界面。去起个名字。 起晚名字什么都不点，直接拉到最后点 Deploy 的按钮。 之后它就会开始 build 了。等会就行。\n这里 View 就直接到建立好的网站了，Manage App 会跳转到 Heroku 管理界面。我们点击 View。\n这样就进入到网页了。这里 Huginn 很人性化的把步骤贴出来了。由于我们用的是自动安装，所以没有创建管理员用户，也有一些东西需要配置。（可以看到已经可以访问域名了） 现在我们对照着 Huginn 的说明来做。\n登陆 Codeanywhere，点击右上角的 Editor。 会进入一个选择界面，如我截图。\n第一次的话点完 Create 会让你验证邮箱，验证完邮箱对着上图再做一遍就可以了。\n我们首先要下载新版本的 ruby 环境。 安装完毕后使用。\n下面的话，我写了一个脚本。这样你只需要输入很少的命令就可以了。\n点击文件 新建文件。\n上 huginn.sh，复制到 Codeanywhere 的文件编辑器里。然后点击右上角保存。\n保存到根目录下，文件名保存为 huginn.sh。\n然后在你的 Heroku 界面找到下图的地方。\n替换我写的脚本的以下地方。\n然后执行脚本 huginn.sh，bash 是执行的意思。\n执行完毕之后。\n先进入 cd code-huginn/（这里的 code-huginn 输入你刚替换我文件中的名字就好）。\n在命令行登陆你的 heroku ，就是在命令行输入 heroku login。\n之后执行 heroku git:remote -a code-huginn。\n最后执行 bin/setup_heroku。\n剩下的就是开始自动配置了。\n几点说明 Heroku 部署很简单，利用我写的脚本应该很快。 Heroku 有时间限制，有时候网站会挂，官方推荐可以使用 uptimerobot 来持续网站运行。参考官方文档。 ","permalink":"http://localhost:1313/posts/herohu-install-huginn/","summary":"需要的东西 Codeanywhere 账号注册（用于 Heroku 环境配置） Heroku 账号注册 部分说明 由于 Huginn 是基于 Ruby 的，所以需要配置 Ruby 的环境。我们这里使用 Codeanywhere，就省去了配置 Ruby 环境。 Cloud9 是一个云端的 IDE，配置好了安装 Huginn 的所有环境，但是注册需要信用卡。（如果你有信用卡我推荐你使用这个。）我们这里使用 Codeanywhere，二者没有特别大的区别，Codeanywhere 比 Cloud9 少了 Heroku 的环境，我会详细说明如何在 Codeanywhere 上配置 Heroku 的环境。 部署步骤 登陆 Huginn Github 主页的 Deployment 部分，找到 Heroku 的按钮。然后点击，就会跳转到你的 Heroku 了。 点完按钮之后会跳转到你的 Heroku 界面。去起个名字。 起晚名字什么都不点，直接拉到最后点 Deploy 的按钮。 之后它就会开始 build 了。等会就行。\n这里 View 就直接到建立好的网站了，Manage App 会跳转到 Heroku 管理界面。我们点击 View。\n这样就进入到网页了。这里 Huginn 很人性化的把步骤贴出来了。由于我们用的是自动安装，所以没有创建管理员用户，也有一些东西需要配置。（可以看到已经可以访问域名了） 现在我们对照着 Huginn 的说明来做。\n登陆 Codeanywhere，点击右上角的 Editor。 会进入一个选择界面，如我截图。","title":"Heroku 安装 Huginn"},{"content":"上学期买了 Kindle，于是 Kindle 就成为了我日常必备的物件…而且我觉得 Kindle 是我买过的超值的一个东西，所以有必要把我的一些使用心得写一写。\n首先要解释一下，当你拿到 Kindle 的时候，会需要一个亚马逊的账号，除此之外每个 Kindle 还会对应一个邮箱（邮箱名可以修改），一般是 @kindle.cn 结尾的。可以在你的 Kindle 设置里或者在亚马逊官网找到。这个邮箱的用途之大。如果你想要什么书的话，直接用邮箱发个附件到你的 Kindle 邮箱，然后 Kindle 连上网就能自动下载这本书了。还可以在主题加上 convert，这时候要发 pdf 格式的话会自动转存 Kindle 格式，不过不推荐，pdf 格式会经常转乱。\n还有要解释的，Kindle 的格式是 azw3 的，mobi 格式也能被 Kindle 读取，pdf 格式也可以，但是 pdf 在 Kindle 上阅读体验只差，因为字太小没法调整。如果是前两种格式的话，可以在 Kindle 中自动调整字体大小，还能重新排版，体验之好。所以如果看 pdf ，还是买一个 iPad Pro 吧。\n解释完了，下面强势安利几个能用得上，可以让你的 Kindle 使用效率翻上 N 翻的东西。\n微信公众号：亚马逊Kindle服务号 微信号：cn_Kindle 这是亚马逊官方的微信公众号，除了会推荐一些书之外，还组织过读书的活动。不过这个公众号最大的杀器就是，和你的专属 Kindle 邮箱绑定之后，可以将微信公众号的文章推送到你的 Kindle 上。对于我这样一个微信公众号重度使用者，是非常有用的。\n有时候来不及看了就直接传到 Kindle 上。具体使用就是长按你要看的公众号，选择\u0026quot;\u0026hellip;\u0026quot;，就会有一个“亚马逊Kindle服务号的”，发送就可以了。也可以打开文章在右上角选择\u0026quot;\u0026hellip;\u0026quot;。具体的使用方法关注之后可以自己查。\n除此之外，应该还可以在微信端买书之后直接推送到 Kindle，因我都是用电脑，所以还试过这个功能。\n微信公众号：Kindle电子书库 微信号：kindle10000 这个其实不该安利的，但是作为 Kindle 新用户可以使用玩玩。因为这其实就是一个盗版图书的汇集地\u0026hellip;我刚开始的时候用，最近都买正版了。所以我不会很详细的说怎么使用，需要的自己去关注就好。\n简单的说就是，它会用你的邮箱给你的 Kindle 邮箱发邮件。具体的绑定不难，就是利用了邮箱协议。关注之后它的说明非常之详细。\n这个的好处在于，你想看什么书直接在微信里输它就会帮你查找，如果确定要看，那么点击推送等一会就可以在你的 Kindle 上看到了。使用之方便是难以言表的。\n除此之外，还有 Kindle杂志公社，微信号：Mag10000，是一家的，可以推送一些杂志到你的 Kindle 上。\nKindle 特价书 这个网站不知道是谁维护的，在知乎上看到之后开始变为日常每天看的网站\u0026hellip;\n有两个原因推荐这个网站，一是有时候不知道想看什么书，这样逛逛会发现不少好书。二是确实便宜啊，比如我买的《中国历史那些事儿系列套装》，一共是 明朝那些事儿（全7册）、这里曾经是汉朝（全6册）、唐史并不如烟（全5册）、如果这是宋史（全10册），原价是 88.59 元，我看到特价的时候，只用了 13.99 元就入了那么多书，还是比较划算的。\ncalibre 软件 —— 支持 Win Mac Linux 这个软件是一个电子书管理软件，可以对电子书进行格式转换等一系列操作。还可以直接在电脑上看 azw 格式和 mobi 格式。除此之外还支持制作电子书，曾经用网上提供的 pocket 接口制作了我 pocket 里面收藏的网页放到 Kindle 上看。\n最近发现了 calibre 的新功能。因为在家的时候我在 Kindle 特价书 上会买好多书，想给我妈还有奶奶都搞一份，毕竟他们也算是出了钱的\u0026hellip;但是亚马逊官方对于购买的书籍都加了 DRM 保护，不能在购买者之外的 Kindle 设备上看。这里不具体一步一步说怎么去除 DRM 保护了，用到的工具 DeDRM_tools，可以安装 calibre 插件，然后将 azw 格式转化为 mobi 格式就可以在其他设备上看了。\nPush to Kindle —— Chrome 插件 这个软件是有 Chrome 插件的，绑定邮箱之后可以直接将网页推送到 Kindle 上看。解决了 Pocket 上面的东西想推送到 Kindle 的问题。\n但是如果就这么点功能未免太什么了。Push to Kindle 个人觉得最厉害的是提供了可以编辑的格式。它在抓取网页之后会显示一个 Preview，如图。如果你对排版不满意，可以点击 pastepad，进入之后，把你想看的网页内容复制进来，对其中的格式进行排版再推送到 Kindle 上，几乎完美解决了不同网页在 Kindle 上阅读体验的问题。\n当然，你还可以用 pastepad 制作 PDF 和 EPUB。里面的内容当然是想是什么就是什么了。我曾经还放过代码，然后推送到 Kindle 上\u0026hellip;十分不建议用 Kindle 看代码。\n其他 如果你想在 Kindle 上看一些 RSS，可以上狗耳朵，里面提供了很多网站的 RSS，每天定点推送到 Kindle 上，非常方便。\nKindle 自带了查词功能，中英文都有。长按就可以了。\n除此之外 Kindle 还可以制作剪切板，看到好的句子可以直接记录在剪切板中，可以用电脑拷出来。具体方法可以网上查一查。\n据说现在 Kindle 还支持微信分享了，没有用过。\n最后 感谢很多人在知乎以及其他网站上分享了很多 Kindle 的使用技巧，我只是针对我自己进行了一些选择，网上还有很多其他的，可以没事查一查。\nKindle 给我的改变比较大，上学期看了好多书，很多玩手机的时间都看书了，感觉还是学到了不少东西的，看书心里愧疚感也会减少。\n俗话说得好。\n“平板穷三代，Kindle 富一生。”\n愿买了 Kindle 的你可以重新爱上读书。\n","permalink":"http://localhost:1313/posts/kindle-tips/","summary":"上学期买了 Kindle，于是 Kindle 就成为了我日常必备的物件…而且我觉得 Kindle 是我买过的超值的一个东西，所以有必要把我的一些使用心得写一写。\n首先要解释一下，当你拿到 Kindle 的时候，会需要一个亚马逊的账号，除此之外每个 Kindle 还会对应一个邮箱（邮箱名可以修改），一般是 @kindle.cn 结尾的。可以在你的 Kindle 设置里或者在亚马逊官网找到。这个邮箱的用途之大。如果你想要什么书的话，直接用邮箱发个附件到你的 Kindle 邮箱，然后 Kindle 连上网就能自动下载这本书了。还可以在主题加上 convert，这时候要发 pdf 格式的话会自动转存 Kindle 格式，不过不推荐，pdf 格式会经常转乱。\n还有要解释的，Kindle 的格式是 azw3 的，mobi 格式也能被 Kindle 读取，pdf 格式也可以，但是 pdf 在 Kindle 上阅读体验只差，因为字太小没法调整。如果是前两种格式的话，可以在 Kindle 中自动调整字体大小，还能重新排版，体验之好。所以如果看 pdf ，还是买一个 iPad Pro 吧。\n解释完了，下面强势安利几个能用得上，可以让你的 Kindle 使用效率翻上 N 翻的东西。\n微信公众号：亚马逊Kindle服务号 微信号：cn_Kindle 这是亚马逊官方的微信公众号，除了会推荐一些书之外，还组织过读书的活动。不过这个公众号最大的杀器就是，和你的专属 Kindle 邮箱绑定之后，可以将微信公众号的文章推送到你的 Kindle 上。对于我这样一个微信公众号重度使用者，是非常有用的。\n有时候来不及看了就直接传到 Kindle 上。具体使用就是长按你要看的公众号，选择\u0026quot;\u0026hellip;\u0026quot;，就会有一个“亚马逊Kindle服务号的”，发送就可以了。也可以打开文章在右上角选择\u0026quot;\u0026hellip;\u0026quot;。具体的使用方法关注之后可以自己查。\n除此之外，应该还可以在微信端买书之后直接推送到 Kindle，因我都是用电脑，所以还试过这个功能。\n微信公众号：Kindle电子书库 微信号：kindle10000 这个其实不该安利的，但是作为 Kindle 新用户可以使用玩玩。因为这其实就是一个盗版图书的汇集地\u0026hellip;我刚开始的时候用，最近都买正版了。所以我不会很详细的说怎么使用，需要的自己去关注就好。\n简单的说就是，它会用你的邮箱给你的 Kindle 邮箱发邮件。具体的绑定不难，就是利用了邮箱协议。关注之后它的说明非常之详细。\n这个的好处在于，你想看什么书直接在微信里输它就会帮你查找，如果确定要看，那么点击推送等一会就可以在你的 Kindle 上看到了。使用之方便是难以言表的。","title":"我的 Kindle 使用技巧"},{"content":" 这个总结，想到哪写到哪。\n大三下的一学期，感觉整个人和工作室融合的非常之密切。因为接手工作室已经大三下了，大三下存在几个问题：\n如果招新，那么他们只有一学期的成长时间。 工作室濒临垮台。 我自身的时间有限，不可能全部精力放在工作室上。 面对上面两个问题，在学期初给自己定了几个目标：\n招人，工作室不能死。 如果招到人，尽我最大努力去教他们一些技术上的东西。 尽可能多在工作室呆着。 对于招人，我只能说很幸运，在詹导可姐还有各位导生的大力帮助下，我们工作室招人的时候尽然出现了工作室坐不下的情况。当然这里大二占了大多数。也有大一的。当时和闫哥想，这么多人，能最后坚持下来的有多少呢。事实证明，淘汰率依然很高，最终留下的人工作室的位置占了一半。很多人坚持了几星期，也有很多人坚持了大半学期，可能因为课业问题放弃了。最终留下的这些人，我相信他们或多或少学到了很多东西。\n如何用一学期的时间去让招来的人在技术上有一个质的飞越，这是我所思考的。对于这一点，我也在学期初定下了几个目标：\n教会他们用谷歌，用 stackoverflow 多看英文资料，多用英文搜索 教会他们用 GitHub 教会他们看源码 如果时间充足，补充一些函数式编程方面的知识 后台从 Java 全面换向 Ruby 其实上面几个实现起来说是简单，其实比我预想的要难一点。就拿用谷歌来说，为了让他们用谷歌，我硬是花大价钱买了路由器，连上路由器就能翻墙。但是难点在于，十几年的百度习惯不可能说改就改。再比如多看英文，有几个人能踏踏实实看英文？大部分人我相信对于英文还是有厌恶感的。看英文都厌烦，用全英文的搜索更是难。看英文烦，那么用stackoverflow和GitHub就会烦。再加上刚学，技术实力达不到，看源码也是很费劲的。\n同时对于我自身来说，面对这么多人，加上我和闫哥还想做一些事情，加上课业，就显得很麻烦。\n在初期的时候，我的精力大多放在培养新人，但是很多时候培养的并不好，我自身的原因也很大，这是我所没有想到的，包括我和闫哥的配合上，也存在很大的问题。\n对于我存在的问题，我去学院工作室和许聚龙聊了一次，和詹导聊了一次。也进行过很多思考，并和闫哥讨论，重新分工等等，做了一些改变。但是由于各方面，更多是自己水平不足能力有限，导致工作室很多事务出现了一些拖延等，这是我所需要在后面的日子检讨的。\n除这些之外，针对工作室之前的问题，我也有以下几个想做改进的地方：\n工作室不是全部学技术的地方，大家的感情也很重要，尤其是负责人和下面人的关系。是为了别人更好，而不是压榨大于感情。 如果实现盈利，钱大家分，无论创业也好，不创业也好，根据劳动力来发工资。作为项目负责人，可以多拿，但是还是要秉承不压榨。 对于盈利的大部分，作为工作室的经费，用于聚餐，学弟学妹们接手工作室之后使用。不会什么都不留下就离开工作室。 我们技术很牛逼，但不是最牛逼的 以上几点，说我是隐射也好，什么也好，是我想做的一些改变。比如第二点，如果一个项目10万，最后分到真正开发人员手里就两三千甚至更少，不知道还好，如果知道，开发人员心里会怎么想，还能不能踏踏实实的跟着boss干。我不是说不可以压榨，压榨也有一个度。我经历的度，未免是我在学校那么工作室里看到压榨比例最高的了。比如第一点，如果我发自肺腑愿意跟着某个boss干，boss却不给予真心相对，我相信即使是创业团队，也不应该吧。我更是觉得，创业，靠的是大家拧成一股绳，各自分散，能干什么呢？技术也是一样，BAT 再厉害，做不到踏踏实实的去静下来钻研一个技术，阅读源码，技术永远不会提高。\n这是我想去改变的，也是我希望后面工作室的人可以去改变的。\n对于我所提到的上面提到的四方面的目标，这学期基本完成任务。\n工作室没死，活的很好，我们人现在也不少，我也在这学期尽可能的在工作室呆上更多的时间。而且，如果说创业，核心的人肯定是有了。\n甚至这学期最最厉害的，可以说是我们大三的几个，除了我，都找到了很好的实习。**琪姐去了腾讯，闫哥去了搜狐，金妮去了百词斩。**不能说和我有很大的关系，但是也有那么一点关系吧。这是后面可以去很骄傲的说的，也是工作室很厉害的一个体现。\n在技术上再多说一些。我在用一学期的时间把工作室打造的可以去创业，如果他们有这个新的话。\n举几个例子来说，我们的后台从 Ruby 换到了 Java，这一点杜奎奎的功不可没。Ruby 太适合创业了。再比如，解决问题的能力，经过我一学期疯狂的洗脑，现在虽然很多人不愿意用英文搜谷歌，但是也愿意用中文搜谷歌了。这就意味着，他们解决问题的能力会比一般人强上一大截。\n教会他们用谷歌，用 stackoverflow 多看英文资料，多用英文搜索 教会他们用 GitHub 教会他们看源码 如果时间充足，补充一些函数式编程方面的知识 对于我定下的技术上 1-6 的实现，基本上是比较圆满的了。下面分别来说一下。\n对于第一点，除了让工作室的无线网直接可以上谷歌之外，我在最开始的时候经常教他们如何去debug，我是做 iOS 的，但是利用谷歌和stackoverflow，可以很好的弥补技术栈的缺失。比如给张瑞调bug的时候，调了几次，他就意识到，原来英文搜索那么厉害，那么牛逼。在这一点上，我还举行过分享，来证明谷歌比百度好。\n对于 GitHub 的使用，因为没来及做分享，但是花时间写了一篇博客，质量个人感觉还比较高。\n看源码这一点，由于很多能力上的问题，他们的水平可能暂时还打不到，但是我每天说每天说，也很好的给他们洗脑了。\n最后一点，我也进行了分享，给他们说了一点函数式的东西。\n除此之外，我们经常聚餐，我常说，我这学期请你们吃饭的次数，顶上过去我在工作室吃饭次数的总和了，还都是工作室掏钱。我自以为和他们处的都不错，至少我在用心的对待他们，这就可以了。\n这学期做了一个项目，对于分成，很负责人的说，我拿的也就比他们多一两百块钱而已\u0026hellip;因为我从对接到各个部分都参与了。剩下的钱，除了聚餐之外，都留给他们用作日常开销了。\n比较负责任的说，算是基本完成了预期的目标。\n中间有一次和迪哥聊了一下，迪哥说我们没有魄力了，不去做东西了，对此我想解释一下。\n首先来说，工作室之前留下的坑，稍微有点大了。技术上，人力上，成长上，都存在很大的问题，我在填，而且我想把这群娃带好，我用了一年半的时间来到现在的水平，我需要用一学期的时间让他们达到，这是需要时间的。而且，工作室不能死在我们手上，说是要交要交，真的就交了？不现实。创业也好，做东西也好，需要看情况来做。不是我不想做，用一学期的时间做别人两学期的事情，这是很耗费精力的。\n当然，这只是说辞，我说了我也存在一些问题，确实也存在，这是我要去改变的，人无完人，我也不是样样精通，所以这学期有什么做的不好的，也需要一些谅解。\n最后还想说一点，给现在的纯技术的工作室。做应用做网站想创业，可以，当然可以，但是难度在逐渐变大，如果有机会我还负责工作室，给我一学期加两个月的时间，我绝对带这个工作室转型。\n下学期，工作室需要过渡的后面的娃们去做了，我也已经尽我最大的努力去给他们营造一个更好的环境和技术栈了。希望他们能很好的发展。\n不过后面的事情谁知道呢？\n","permalink":"http://localhost:1313/posts/junior-year-studio-summary/","summary":"这个总结，想到哪写到哪。\n大三下的一学期，感觉整个人和工作室融合的非常之密切。因为接手工作室已经大三下了，大三下存在几个问题：\n如果招新，那么他们只有一学期的成长时间。 工作室濒临垮台。 我自身的时间有限，不可能全部精力放在工作室上。 面对上面两个问题，在学期初给自己定了几个目标：\n招人，工作室不能死。 如果招到人，尽我最大努力去教他们一些技术上的东西。 尽可能多在工作室呆着。 对于招人，我只能说很幸运，在詹导可姐还有各位导生的大力帮助下，我们工作室招人的时候尽然出现了工作室坐不下的情况。当然这里大二占了大多数。也有大一的。当时和闫哥想，这么多人，能最后坚持下来的有多少呢。事实证明，淘汰率依然很高，最终留下的人工作室的位置占了一半。很多人坚持了几星期，也有很多人坚持了大半学期，可能因为课业问题放弃了。最终留下的这些人，我相信他们或多或少学到了很多东西。\n如何用一学期的时间去让招来的人在技术上有一个质的飞越，这是我所思考的。对于这一点，我也在学期初定下了几个目标：\n教会他们用谷歌，用 stackoverflow 多看英文资料，多用英文搜索 教会他们用 GitHub 教会他们看源码 如果时间充足，补充一些函数式编程方面的知识 后台从 Java 全面换向 Ruby 其实上面几个实现起来说是简单，其实比我预想的要难一点。就拿用谷歌来说，为了让他们用谷歌，我硬是花大价钱买了路由器，连上路由器就能翻墙。但是难点在于，十几年的百度习惯不可能说改就改。再比如多看英文，有几个人能踏踏实实看英文？大部分人我相信对于英文还是有厌恶感的。看英文都厌烦，用全英文的搜索更是难。看英文烦，那么用stackoverflow和GitHub就会烦。再加上刚学，技术实力达不到，看源码也是很费劲的。\n同时对于我自身来说，面对这么多人，加上我和闫哥还想做一些事情，加上课业，就显得很麻烦。\n在初期的时候，我的精力大多放在培养新人，但是很多时候培养的并不好，我自身的原因也很大，这是我所没有想到的，包括我和闫哥的配合上，也存在很大的问题。\n对于我存在的问题，我去学院工作室和许聚龙聊了一次，和詹导聊了一次。也进行过很多思考，并和闫哥讨论，重新分工等等，做了一些改变。但是由于各方面，更多是自己水平不足能力有限，导致工作室很多事务出现了一些拖延等，这是我所需要在后面的日子检讨的。\n除这些之外，针对工作室之前的问题，我也有以下几个想做改进的地方：\n工作室不是全部学技术的地方，大家的感情也很重要，尤其是负责人和下面人的关系。是为了别人更好，而不是压榨大于感情。 如果实现盈利，钱大家分，无论创业也好，不创业也好，根据劳动力来发工资。作为项目负责人，可以多拿，但是还是要秉承不压榨。 对于盈利的大部分，作为工作室的经费，用于聚餐，学弟学妹们接手工作室之后使用。不会什么都不留下就离开工作室。 我们技术很牛逼，但不是最牛逼的 以上几点，说我是隐射也好，什么也好，是我想做的一些改变。比如第二点，如果一个项目10万，最后分到真正开发人员手里就两三千甚至更少，不知道还好，如果知道，开发人员心里会怎么想，还能不能踏踏实实的跟着boss干。我不是说不可以压榨，压榨也有一个度。我经历的度，未免是我在学校那么工作室里看到压榨比例最高的了。比如第一点，如果我发自肺腑愿意跟着某个boss干，boss却不给予真心相对，我相信即使是创业团队，也不应该吧。我更是觉得，创业，靠的是大家拧成一股绳，各自分散，能干什么呢？技术也是一样，BAT 再厉害，做不到踏踏实实的去静下来钻研一个技术，阅读源码，技术永远不会提高。\n这是我想去改变的，也是我希望后面工作室的人可以去改变的。\n对于我所提到的上面提到的四方面的目标，这学期基本完成任务。\n工作室没死，活的很好，我们人现在也不少，我也在这学期尽可能的在工作室呆上更多的时间。而且，如果说创业，核心的人肯定是有了。\n甚至这学期最最厉害的，可以说是我们大三的几个，除了我，都找到了很好的实习。**琪姐去了腾讯，闫哥去了搜狐，金妮去了百词斩。**不能说和我有很大的关系，但是也有那么一点关系吧。这是后面可以去很骄傲的说的，也是工作室很厉害的一个体现。\n在技术上再多说一些。我在用一学期的时间把工作室打造的可以去创业，如果他们有这个新的话。\n举几个例子来说，我们的后台从 Ruby 换到了 Java，这一点杜奎奎的功不可没。Ruby 太适合创业了。再比如，解决问题的能力，经过我一学期疯狂的洗脑，现在虽然很多人不愿意用英文搜谷歌，但是也愿意用中文搜谷歌了。这就意味着，他们解决问题的能力会比一般人强上一大截。\n教会他们用谷歌，用 stackoverflow 多看英文资料，多用英文搜索 教会他们用 GitHub 教会他们看源码 如果时间充足，补充一些函数式编程方面的知识 对于我定下的技术上 1-6 的实现，基本上是比较圆满的了。下面分别来说一下。\n对于第一点，除了让工作室的无线网直接可以上谷歌之外，我在最开始的时候经常教他们如何去debug，我是做 iOS 的，但是利用谷歌和stackoverflow，可以很好的弥补技术栈的缺失。比如给张瑞调bug的时候，调了几次，他就意识到，原来英文搜索那么厉害，那么牛逼。在这一点上，我还举行过分享，来证明谷歌比百度好。\n对于 GitHub 的使用，因为没来及做分享，但是花时间写了一篇博客，质量个人感觉还比较高。\n看源码这一点，由于很多能力上的问题，他们的水平可能暂时还打不到，但是我每天说每天说，也很好的给他们洗脑了。\n最后一点，我也进行了分享，给他们说了一点函数式的东西。\n除此之外，我们经常聚餐，我常说，我这学期请你们吃饭的次数，顶上过去我在工作室吃饭次数的总和了，还都是工作室掏钱。我自以为和他们处的都不错，至少我在用心的对待他们，这就可以了。\n这学期做了一个项目，对于分成，很负责人的说，我拿的也就比他们多一两百块钱而已\u0026hellip;因为我从对接到各个部分都参与了。剩下的钱，除了聚餐之外，都留给他们用作日常开销了。\n比较负责任的说，算是基本完成了预期的目标。\n中间有一次和迪哥聊了一下，迪哥说我们没有魄力了，不去做东西了，对此我想解释一下。\n首先来说，工作室之前留下的坑，稍微有点大了。技术上，人力上，成长上，都存在很大的问题，我在填，而且我想把这群娃带好，我用了一年半的时间来到现在的水平，我需要用一学期的时间让他们达到，这是需要时间的。而且，工作室不能死在我们手上，说是要交要交，真的就交了？不现实。创业也好，做东西也好，需要看情况来做。不是我不想做，用一学期的时间做别人两学期的事情，这是很耗费精力的。\n当然，这只是说辞，我说了我也存在一些问题，确实也存在，这是我要去改变的，人无完人，我也不是样样精通，所以这学期有什么做的不好的，也需要一些谅解。\n最后还想说一点，给现在的纯技术的工作室。做应用做网站想创业，可以，当然可以，但是难度在逐渐变大，如果有机会我还负责工作室，给我一学期加两个月的时间，我绝对带这个工作室转型。\n下学期，工作室需要过渡的后面的娃们去做了，我也已经尽我最大的努力去给他们营造一个更好的环境和技术栈了。希望他们能很好的发展。","title":"工作室总结"},{"content":"有些个文章总得写。\n大三下过的实在是充实到不能更充实。课程是一方面，工作室是一方面，当然这两方面就足够我应付的了。偶尔在加参加个什么比赛，日子就过的浑浑噩噩了。\n再加上大三下，不能保研又不能出国，上课自然而然就显得开始放荡不羁。每天泡在电脑跟前的时间实在是创下了新的记录。我的很多改变来自于工作室，工作室也有很多改变来自于我。这是后话。\n其实大三下是成长比较快的一学期，因为之前的一年半在工作室和学长创业，实在是见到了很多让人觉得心中有力又不知道怎么去表述的感觉。长期的外包做的我每天除了哭累还是哭累。以至于在工作室的时候隔三差五就和琪姐说不想干了。\n但是痛苦总是让人可以有很多蜕变，经历过很多委屈很多不开心，会开始认清这个世界残酷的一面。你愿意掏心掏肺跟着别人干，别人可不会这么觉得，你是下属，就是要压榨你。当然我相信这是个例。当然我希望现实社会这也是个例。\n技术上也是一样，经历了一年半的外包，几乎是全靠自己不断的琢磨，开始逐渐找到正确的学习方式，也开始把自己的一些弯路给小学弟们分享。这也是后话了。\n很久没去做管理才发现自己这方面的才能需要更多的去锻炼了。这学期买了kindle，看了很多书，这一点是这学期非常满意的，看了很多书对自己的各方面都是一个提升的过程。后面这一块也是需要加强的。读书不只是会让个人能力提高，还可以对很多事情的看法产生一个新的理解。\n学习上实在是没啥好说的。这学期精力大多放在工作室上，除了自己学了Swift，参与了T沙龙之外，技术上说实话实在是没有什么提高。倒是各方面都涉及了一点，作为工作室负责人，你不得不去从前端会到后台再到两个客户端。包括我一直很想学的Haskell，这学期也重新捡起来开始学了。暑假也学了一部分。\n这学期还开了公众号，在写作上重新给自己定了目标。也算是大学后面的一个目标。不靠技术吃饭，靠写文字吃饭。如果能做到我会很开心的。\n后面的打算，逐渐打算转方向，计算机的一切，最终都来源于更高深的理论基础，所以后面的重心会更偏向理论一点。\n之前都是感谢信安1班，这学期很好的是，我们每周都会一起打篮球，没事窜寝室闲扯。大家一起锻炼总是好的。这学期几乎是跑了一学期的步，也是我很值得骄傲的一点。\n这学期还要感谢工作室的小学弟们和小学妹们，尤其闫哥琪姐还有金尼。因为我可以自豪的说，我们工作室出了一个搜狐，一个腾讯，一个百词斩，都和我有关系，哈哈。他们的努力是必然的，我的协助也是有一定帮助的这不能否认。\n在工作室看到很多小姑娘总是好的，枯燥的生活总得有点色彩。小学弟们也很努力，至少我现在可以比较放心的觉得工作室不会死了。这也是后话了。\n总之。\n这一学期实在是充实的让我觉得瞬间就没了。\n依旧。\n各种感谢！深鞠躬！爱你们！\n","permalink":"http://localhost:1313/posts/year3-second-term-sumup/","summary":"有些个文章总得写。\n大三下过的实在是充实到不能更充实。课程是一方面，工作室是一方面，当然这两方面就足够我应付的了。偶尔在加参加个什么比赛，日子就过的浑浑噩噩了。\n再加上大三下，不能保研又不能出国，上课自然而然就显得开始放荡不羁。每天泡在电脑跟前的时间实在是创下了新的记录。我的很多改变来自于工作室，工作室也有很多改变来自于我。这是后话。\n其实大三下是成长比较快的一学期，因为之前的一年半在工作室和学长创业，实在是见到了很多让人觉得心中有力又不知道怎么去表述的感觉。长期的外包做的我每天除了哭累还是哭累。以至于在工作室的时候隔三差五就和琪姐说不想干了。\n但是痛苦总是让人可以有很多蜕变，经历过很多委屈很多不开心，会开始认清这个世界残酷的一面。你愿意掏心掏肺跟着别人干，别人可不会这么觉得，你是下属，就是要压榨你。当然我相信这是个例。当然我希望现实社会这也是个例。\n技术上也是一样，经历了一年半的外包，几乎是全靠自己不断的琢磨，开始逐渐找到正确的学习方式，也开始把自己的一些弯路给小学弟们分享。这也是后话了。\n很久没去做管理才发现自己这方面的才能需要更多的去锻炼了。这学期买了kindle，看了很多书，这一点是这学期非常满意的，看了很多书对自己的各方面都是一个提升的过程。后面这一块也是需要加强的。读书不只是会让个人能力提高，还可以对很多事情的看法产生一个新的理解。\n学习上实在是没啥好说的。这学期精力大多放在工作室上，除了自己学了Swift，参与了T沙龙之外，技术上说实话实在是没有什么提高。倒是各方面都涉及了一点，作为工作室负责人，你不得不去从前端会到后台再到两个客户端。包括我一直很想学的Haskell，这学期也重新捡起来开始学了。暑假也学了一部分。\n这学期还开了公众号，在写作上重新给自己定了目标。也算是大学后面的一个目标。不靠技术吃饭，靠写文字吃饭。如果能做到我会很开心的。\n后面的打算，逐渐打算转方向，计算机的一切，最终都来源于更高深的理论基础，所以后面的重心会更偏向理论一点。\n之前都是感谢信安1班，这学期很好的是，我们每周都会一起打篮球，没事窜寝室闲扯。大家一起锻炼总是好的。这学期几乎是跑了一学期的步，也是我很值得骄傲的一点。\n这学期还要感谢工作室的小学弟们和小学妹们，尤其闫哥琪姐还有金尼。因为我可以自豪的说，我们工作室出了一个搜狐，一个腾讯，一个百词斩，都和我有关系，哈哈。他们的努力是必然的，我的协助也是有一定帮助的这不能否认。\n在工作室看到很多小姑娘总是好的，枯燥的生活总得有点色彩。小学弟们也很努力，至少我现在可以比较放心的觉得工作室不会死了。这也是后话了。\n总之。\n这一学期实在是充实的让我觉得瞬间就没了。\n依旧。\n各种感谢！深鞠躬！爱你们！","title":"大三下学期总结"},{"content":"安装准备工作 Huginn 的官方安装指南全部步骤已经经过测试，建议安装时直接复制官方所提供的指令进行安装。如果遇到问题，请查看最下面的 错误解决方法。\n对于大多数服务器来说，由于配置不够，基本都会出现 “Cannot allocate memory” 问题，也请查看 错误解决方法。\n1. 需要在开始的时候设置主机语言 如果不设置主机语言的话，会在后面有很神奇的错误。设置主机语言的命令是\nexport LC_ALL=en_US.UTF-8 （需要设置中文自行 google，可能这样设置还不够..最好查一下怎么设置语言） export LANGUAGE=en_US.UTF-8\n2. 需要设置时区 不设置时区抓取的时候时间会有问题，不过这一步问题不大。命令如下。\nsudo dpkg-reconfigure tzdata\n在Huginn官方的安装wiki中，其实有很多安装问题没有具体列出，我在上一篇博客中做了一些总结。在这篇博客中，我会做成一个安装问题的集合。以方便各位的安装。\n官方 wiki 部分修正以及注释 1. 官方最开始有一步 Import node.js repository… curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -\n这一步官方用了脚本执行，可以不复制那个 curl 开头的，新版本的 nodejs 安装只需要用 apt-get install nodejs 就可以了。\n因为官方在后面 Install the required packages 中有 nodejs 的安装，所以 Import node.js repository 这一步其实可以不去做。\n2. Install Init Script 在这一步中建议直接把\n# web: bundle exec unicorn -c config/unicorn.rb # jobs: bundle exec rails runner bin/threaded.rb 这两行的 # 去掉的。\n3. 配置 nginx YOUR_SERVER_FQDN 这个改成你的主机ip就可以了。我没有域名不知道域名的怎么弄。\n备注：我没有使用 https ，所以如果有需要 https 自己踩下吧。 作者很耐心，提 issue 的话很快就能回复，而且问题定位比较准确。提的时候先查看有没有重复的，然后记得用英文就好。\n4. Mysql 安装时不建议装 mysql_secure_installation 会加强你的密码强度..个人觉得太费事了。\n5. Install Gems 如果报错，执行 bundle install 如标题\n错误解决方法 1. 全部安装完毕web打开 css 不显示 Rails 静态资源需要编译，不然 css 不显示。我已经提了 issue ，遇到这个问题可以参看这个 issue。\ncss and image is not load\n2. 在 bundle install 的时候显示 “Cannot allocate memory” 等一系列和memory相关的报错 简单的说，swap 不够了。具体方法见 How To Add Swap on Ubuntu 14.04\n3. Mysql 设置 Innodb 出现 ‘Unknown system variable \u0026lsquo;storage_engine\u0026rsquo;’ 直接在/etc/mysql/my.cnf 中设置\n[mysqld] default-storage-engine = InnoDB\n参见：Migrate Jira to MySql - Unknown system variable \u0026lsquo;storage_engine\u0026rsquo;\n","permalink":"http://localhost:1313/posts/huginn-installation-guide/","summary":"安装准备工作 Huginn 的官方安装指南全部步骤已经经过测试，建议安装时直接复制官方所提供的指令进行安装。如果遇到问题，请查看最下面的 错误解决方法。\n对于大多数服务器来说，由于配置不够，基本都会出现 “Cannot allocate memory” 问题，也请查看 错误解决方法。\n1. 需要在开始的时候设置主机语言 如果不设置主机语言的话，会在后面有很神奇的错误。设置主机语言的命令是\nexport LC_ALL=en_US.UTF-8 （需要设置中文自行 google，可能这样设置还不够..最好查一下怎么设置语言） export LANGUAGE=en_US.UTF-8\n2. 需要设置时区 不设置时区抓取的时候时间会有问题，不过这一步问题不大。命令如下。\nsudo dpkg-reconfigure tzdata\n在Huginn官方的安装wiki中，其实有很多安装问题没有具体列出，我在上一篇博客中做了一些总结。在这篇博客中，我会做成一个安装问题的集合。以方便各位的安装。\n官方 wiki 部分修正以及注释 1. 官方最开始有一步 Import node.js repository… curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -\n这一步官方用了脚本执行，可以不复制那个 curl 开头的，新版本的 nodejs 安装只需要用 apt-get install nodejs 就可以了。\n因为官方在后面 Install the required packages 中有 nodejs 的安装，所以 Import node.js repository 这一步其实可以不去做。\n2. Install Init Script 在这一步中建议直接把\n# web: bundle exec unicorn -c config/unicorn.","title":"Huginn 安装备注（持续更新）"},{"content":" 如果你不知道什么是 RSS，赶紧去查查是什么然后用起来吧，相信我，用了就再也离不开了。\n我是一个重度 RSS 使用者，一般来说，我获取信息有微博，微信，邮件，还有就是 RSS 。每次打开 Chrome 之后第一个打开的就是 Feedly，看看有没有新的内容更新，省去我了一次性打开多个网站的麻烦。但是问题来了，有些网站没有 RSS 怎么办？\n前几天在利器的群里，看到有在讨论一个叫 Huginn 的东西，一个叫祥子的朋友还很热心的给大家解答一些关于这个的问题，我稍微查了查，发现这个东西可以解决我一直的一个痛点，就决定花时间来倒腾一下。\nHuginn 是一个 Github 的开源项目，已经上万 Star 了。简单的说这个东西是一个 IFTTT 形式的东西，可以把所有网页转换成 RSS 输出。更简单的说，就是工作流形式，类似于 iPhone 上的 Workflow。\n安装 安装有很多的方式，官方提了有 Heroku，docker，还有服务器。\n祥子专门写了文章介绍怎么利用 Heroku 来安装。Huginn安装教程—建立你自己的IFTTT，写的非常详细，需要的可以去看这个。\n我是用我日本的 vps 来搭建的，但是由于官方的文档实在是太详细了\u0026hellip;导致我想写安装发现没啥好写的，我就把遇到的几个问题略微叙述一下。\n官方文档安装教程地址 坑1. 官方最开始有一步 Import node.js repository\u0026hellip; curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -\n这一步官方用了脚本执行，可以不复制那个 curl 开头的，新版本的 nodejs 安装只需要用 apt-get install nodejs 就可以了。\n因为官方在后面 Install the required packages 中有 nodejs 的安装，所以 Import node.js repository 这一步其实可以不去做。\n坑2. 需要在开始的时候设置主机语言 如果不设置主机语言的话，会在后面有很神奇的错误。设置主机语言的命令是\nexport LC_ALL=en_US.UTF-8 （需要设置中文自行 google，可能这样设置还不够..最好查一下怎么设置语言）\n坑3. 需要设置时区 不设置时区抓取的时候时间会有问题，不过这一步问题不大。命令如下。\nsudo dpkg-reconfigure tzdata\n坑4. 全部安装完毕 css 不显示 Rails 静态资源需要编译，不然 css 不显示。我已经提了 issue ，遇到这个问题可以参看这个 issue。\ncss and image is not load\n坑5. Install Init Script 在这一步中是 或 的关系，一定要搞明白。\n我选择的是在这步把\n# web: bundle exec unicorn -c config/unicorn.rb # jobs: bundle exec rails runner bin/threaded.rb 这两行的 # 去掉了的。\n坑6. 配置 nginx YOUR_SERVER_FQDN 这个改成你的主机ip就可以了。我没有域名不知道域名的怎么弄。\n备注：我没有使用 https ，所以如果有需要 https 自己踩下吧。\n作者很耐心，提 issue 的话很快就能回复，而且问题定位比较准确。提的时候先查看有没有重复的，然后记得用英文就好。\n坑7. 在bundle install的时候显示“Cannot allocate memory - git” 简单的说，swap不够了..具体方法见How To Add Swap on Ubuntu 14.04\n使用 使用的方式我捉摸了很久才搞定..我会举个把网页转换成RSS的详细的例子。\n开始之前首先需要解释几个东西。\n网页的格式是 html，RSS 的格式是 xml。 xpath 是你用来确定网页元素的方法，这一步我会有一个很简单的方法来教大家怎么去搞定元素的确定。 由于是工作流的形式，所以我们整个的过程其实有两步，第一步是抓取网页的信息，第二步是返回 RSS 的地址。 下面开始举例子。我们现在要把我的博客 http://walkginkgo.com/转换成 RSS。\n按照3中说的，我们需要先抓取网页信息。抓取网页信息，要创建一个 Website Agent。\n按照图示，名字随便起，其他可以先默认。（全部解释太麻烦）\n然后是关键的一步，我们要开始确定网页的元素。\n点击 Toggle View 到文本编辑模式。我们要修改我圈出来的两个地方。\n我们需要修改url到我们的网址，在这里就是 http://walkginkgo.com/ 了。\nextract 是我们要提取的信息，我们这里要提取博客的题目，网址，发布日期，简述。\n我们现在打开tesths这个博客进去来看怎么抓取元素。\n在 Chrome 打开，然后选择你要的元素，右键选择 Inspect。可以看到 Chrome 下面的审查元素信息已经出来了。\n可以看到我们的元素在 span 标签里，这时候我们如图右键选择之后然后复制。\n复制的东西如下。\n/html/body/div[1]/div/div/ul/li[1]/h2/a/span/text()\n把之前的 css 改成 xpath 然后直接复制就可以了。点击下面的 Dry Run，可以看到我们的标题已经搞定了。（css 使用见下面备注）\n但是还有两个问题，一个是，我们只爬了一个标题，二是标题有空格。\n解决问题1，需要把我们的 xpath 改成这样。\n/html/body/div[1]/div/div/ul/li/h2/a/span/text()\n是因为 li[1] 代表我们第一个标题，所以把[1]去了就可以了。\n解决问题2，需要我们加上一句话。\n\u0026quot;value\u0026quot;: \u0026quot;normalize-space(.)\u0026quot;\n这句话的意思就是把空格去了。\n最后就是这样。\n下面我们把链接按照这个方法也爬下来。找到链接的地方，因为链接在a标签里面，所以我们要加一个 value，选择到 href。剩下我就不具体叙述了，我把最后完整的截图出来。\n日期什么的方法类似，也不多说。这样其实没有什么 html 的基础也可以爬网页了。\nDry Run 之后的结果如图。\n别忘记 Save。\n备注：官方默认创建用的是 css，Chrome 提供了复制 css 的方式，格式稍微改动成和官方例子那样空格来代替**\u0026gt;**就可以了。\n这么我们就完成了工作的第一步，抓取网页，下一步要输出 RSS。\n前面都随便写，记得 Sources 选择我们之前的 tesths blog。\n下面是继续配置 Option，这就比之前简单了。\n但是注意我们之前的链接没有前面的 http://walkginkgo.com/ 这一串，我们要加上。\n最后完整的是这样的。\n还要记得把你博客的 link 加上。\n之后选择 Save 就到了这。\n可以看到已经有 xml 格式的输出了。\n最后一步我们要烧录 RSS。用到的时谷歌家的服务 feedburner\n然后next。\n继续next。\n把网址复制到 Feedly 里面，大功告成！\n更多备注 因为我个人 RSS 主要是看有没有更新，所以抓取的内容不详细，需要抓取全文在手机看的话就自己倒腾啦。\n如果输出 RSS 没有结果的话，可以看下是否允许，没运行点击一下 run 就可以了。\n如果你遇到输出的结果有问题，可以看下是不是event多了。\n如果多了就全部删除重新运行。\n总之真的没有很难，最难的是 xpath 获取元素，但是我已经用了最简单的方式来教大家了，剩下的无论是不是专业学编程的都能很快搞定啦，就看大家怎么去玩这个了。\n至于抓取 RSS 的频率，正在测试中..敬请关注更新。\n参考链接\nHUGINN:烧录RSS的神器 Huginn安装教程—建立你自己的IFTTT cantino/huginn ","permalink":"http://localhost:1313/posts/huginn-install-notes/","summary":"如果你不知道什么是 RSS，赶紧去查查是什么然后用起来吧，相信我，用了就再也离不开了。\n我是一个重度 RSS 使用者，一般来说，我获取信息有微博，微信，邮件，还有就是 RSS 。每次打开 Chrome 之后第一个打开的就是 Feedly，看看有没有新的内容更新，省去我了一次性打开多个网站的麻烦。但是问题来了，有些网站没有 RSS 怎么办？\n前几天在利器的群里，看到有在讨论一个叫 Huginn 的东西，一个叫祥子的朋友还很热心的给大家解答一些关于这个的问题，我稍微查了查，发现这个东西可以解决我一直的一个痛点，就决定花时间来倒腾一下。\nHuginn 是一个 Github 的开源项目，已经上万 Star 了。简单的说这个东西是一个 IFTTT 形式的东西，可以把所有网页转换成 RSS 输出。更简单的说，就是工作流形式，类似于 iPhone 上的 Workflow。\n安装 安装有很多的方式，官方提了有 Heroku，docker，还有服务器。\n祥子专门写了文章介绍怎么利用 Heroku 来安装。Huginn安装教程—建立你自己的IFTTT，写的非常详细，需要的可以去看这个。\n我是用我日本的 vps 来搭建的，但是由于官方的文档实在是太详细了\u0026hellip;导致我想写安装发现没啥好写的，我就把遇到的几个问题略微叙述一下。\n官方文档安装教程地址 坑1. 官方最开始有一步 Import node.js repository\u0026hellip; curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -\n这一步官方用了脚本执行，可以不复制那个 curl 开头的，新版本的 nodejs 安装只需要用 apt-get install nodejs 就可以了。\n因为官方在后面 Install the required packages 中有 nodejs 的安装，所以 Import node.js repository 这一步其实可以不去做。","title":"让所有网页变成RSS —— Huginn"},{"content":" 依旧是一篇探究 Mac 软件原理的文章\n前几天在用小历的时候，发现了这么一个功能。\n选择之后，小历会从这样变到这样。\n然后我就开始想这个是怎么实现的，这里我们必须要对比一个软件，卖了105.88人民币的著名 Mac 状态栏管理软件 Bartender 2。\n在 Bartender 中有一个功能，你可以按住 ⌘ 之后点击图标来拖动来改变它在 Mac 状态栏的位置，就像这样（看网易云音乐）。\n如果 Bartender 可以的，那为什么小历不能这么做，这样的话用户体验不是更好吗？于是开始了一轮疯狂的 Google 和 Stackoverflow 。\n结果结论是，在老版本的 Mac 操作系统中，是默认支持 ⌘+ 图标改变位置的，但是在 10.11 中，这个功能被取消了，只有使用 Bartender 来改变位置。而在 Apple 给出的 API 中，没有可以改变状态栏图标位置的方法。那么 Bartender 是怎么实现的，小历又为什么不能实现。之后就是接着查。\n经过不断的改变关键字..在某一个 Stackoverflow 中发现了一个叫做 NSMenuExtra 的类，这是私有的 API ，在这个方法中，可以实现 Bartender 中的那个改变位置的效果，但是如果使用了苹果私有的 API ，应用是不能上线到 App Store 的，小历上线到了 App Store ，说明没有用到私有 API，之后我就一片混乱了\u0026hellip;\n无耐之下，我在微博上给小历的作者发了一个私信，没想到很快小历的作者就给我回复了！他给了我一个 Github 的地址，NSStatusBar-MISSINGOrder\n之后我看了一下，正如作者所说，是构造了一个 Selector，但实际上是用 Hack 的方法调用了两个方法\n- (void)_insertStatusItem:(id)arg1 withPriority:(long long)arg2;\n- (id)_statusItemWithLength:(double)arg1 withPriority:(long long)arg2;\n我们来看这两个方法。Priority 实际上是确定位置的，优先级越高，位置越靠左。但是问题在于，这两个方法不在 NSMenuExtra 中，那么这两个方法又是哪来的呢？\n其实这两个方法是 Apple 留下的后门，这两个方法是 NSStatusBar 中没有公开的 API。\n于是，我决定开始使用 class-dump 来查看未公开的 API。\n./class-dump -H -o ~/Desktop /System/Library/Frameworks/AppKit.framework\n这个命令会把 AppKit.framework 中的所有方法都导出一个一个的.h文件。\n在里面找到 NSStatusBar.h，就可以看到这两个方法了。\n所以在小历当中，怎么说呢..其实是调用了私有的 API，但是不明显，而且调用的很少。所以上线到 App Store 是没有太大问题的。\n下面我们来猜测一下 Bartender 可以把所有图标放到状态栏下面那行的大概原理。\n./class-dump -H -o ~/Desktop/private /System/Library/PrivateFrameworks/SystemUIPlugin.framework/Versions/A/SystemUIPlugin\n这个命令会把 NSMenuExtra 相关的.h头文件导出。还有其他的一系列头文件。\nNSMenuExtra 中有 drawRect 方法，应该就是先画 view，然后把图标放进去就可以啦。\n至于按⌘拖动那个嘛..我估计，应该是提供了某个方法，可能是在 NSMenuExtraView 中的 mouseDown 方法，但是没文档啥的，我不确定..就得试和看命名了，我就不继续深究了。因为本来也就是一次探究大概原理的文章，主要是我 Bartender 都买了..也就没有什么继续研究的动力了哈哈。\n小小总结一下。\n如果是做 Mac 开发的，class-dump 是个好东西，因为在 Mac 上，你可以不上线 App Store 来分发你的应用，那么我们就可以调用私有 API 来 Hack 很多好玩的功能，这样其实是很好的。比如 Bartender，100多块钱而且基本用 Mac 都会买，还是可以赚上一笔的。\n其次，class-dump 导出的头文件是没有文档的，这个就真的纯靠试和看命名了。需要开发者的耐心和不怕死的心。\n参考链接：\nBuilding NSMenuExtra - A Small Tutorial NSMenuExtra – working with undocumented APIs NSStatusBar-MISSINGOrder MAC系统状态栏通过插件添加图标MenuExtra Plugin Cocoa菜单栏右侧图标的实现 ","permalink":"http://localhost:1313/posts/mac-statusbar-hack/","summary":"依旧是一篇探究 Mac 软件原理的文章\n前几天在用小历的时候，发现了这么一个功能。\n选择之后，小历会从这样变到这样。\n然后我就开始想这个是怎么实现的，这里我们必须要对比一个软件，卖了105.88人民币的著名 Mac 状态栏管理软件 Bartender 2。\n在 Bartender 中有一个功能，你可以按住 ⌘ 之后点击图标来拖动来改变它在 Mac 状态栏的位置，就像这样（看网易云音乐）。\n如果 Bartender 可以的，那为什么小历不能这么做，这样的话用户体验不是更好吗？于是开始了一轮疯狂的 Google 和 Stackoverflow 。\n结果结论是，在老版本的 Mac 操作系统中，是默认支持 ⌘+ 图标改变位置的，但是在 10.11 中，这个功能被取消了，只有使用 Bartender 来改变位置。而在 Apple 给出的 API 中，没有可以改变状态栏图标位置的方法。那么 Bartender 是怎么实现的，小历又为什么不能实现。之后就是接着查。\n经过不断的改变关键字..在某一个 Stackoverflow 中发现了一个叫做 NSMenuExtra 的类，这是私有的 API ，在这个方法中，可以实现 Bartender 中的那个改变位置的效果，但是如果使用了苹果私有的 API ，应用是不能上线到 App Store 的，小历上线到了 App Store ，说明没有用到私有 API，之后我就一片混乱了\u0026hellip;\n无耐之下，我在微博上给小历的作者发了一个私信，没想到很快小历的作者就给我回复了！他给了我一个 Github 的地址，NSStatusBar-MISSINGOrder\n之后我看了一下，正如作者所说，是构造了一个 Selector，但实际上是用 Hack 的方法调用了两个方法\n- (void)_insertStatusItem:(id)arg1 withPriority:(long long)arg2;\n- (id)_statusItemWithLength:(double)arg1 withPriority:(long long)arg2;","title":"Mac状态栏Hack"},{"content":"耽误了那么久才开始写，因为连续考了三天试..那天晚上和坦坦回学校的时候朋友圈发了好长一截，我怕我忘了..闲话少说，开始记录一下吧~\n总体给我的感觉，很赞，真心很赞。这算是我第一次参加技术沙龙，Swift的。\n时间是上周日，19号。我和坦坦，下文统一为蛋哥。我和蛋哥约在活动中心见面，然后打uber去了天府软件园。去了之后和蛋哥一起吃了KFC，然后就坐在那等蓉姐和肠叔。其实之前和蛋哥有过交流，后来蓉姐来了。我简直就是作为一个记者一样，对蓉姐进行了一个采访，从蓉姐学iOS到工作，问了个遍，下次可以带着录音笔，出个采访稿也是不错的。\n首见蓉姐 蓉姐为啥要单独提出来说？**因为蓉姐是一个做iOS开发的女孩。**对，女孩..\n蓉姐和我想象的完全不一样，蓉姐作为一个女孩写iOS，我心里是很佩服的。我从来没有看不起女程序员，我是超级佩服。因为工作室很多学妹在学习编程上都存在大大小小的问题。所以我也问了蓉姐很多问题。蓉姐也超级耐心的和我解答。\n蓉姐大三开始学iOS，现在在做智能玩具。我看了蓉姐的博客，写了一个蓝牙的系列，很nice。我还咨询了蓉姐一下iBeacon的问题，蓉姐说其实原生的api其实足够，但是蓝牙也有很多坑。蓉姐还做过php，大一学了c语言之后就做编程了。\n蓉姐大概还是个摄影爱好者，相机和脚架很齐全，我很佩服。蓉姐说她在深圳的公司的时候压力很大也坚持下来了。总之，和蓉姐简短的聊天，除了佩服就剩佩服了。有那么一点女汗子的感觉，蓉姐的经历可以让我以后和工作室的学妹说，编程，从来不是难事，是努力可以做好的事情。\n我和蛋哥蓉姐回合之后就去了camera360，沙龙在camera360举办，环境超级nice。我很喜欢那里的办公环境，理由很简单，我进去就看到了运动器械\u0026hellip;跑步机瑜伽球乒乓球桌投篮机一应俱全。\n之后就一起排了一下座位。等大家到起齐就开始了。\n畅叔开场 稍微介绍一下畅叔。畅叔是帮主的大学同学，帮主就是T沙龙的总司令梁杰，梁杰是跨界网红。畅叔之所以叫畅叔就是因为畅叔年级轻轻看上去好老\u0026hellip;是真的。当然畅叔也是跨界。\n畅叔先是感谢了泊学的赞助~还有camera360的场地提供。\n畅叔先是大概介绍了T沙龙的起因以及T沙龙的形式。T沙龙真的要开遍全国，每个月举办线下的沙龙。最重要的是，非盈利，不收费，非盈利，不收费，非盈利，不收费。重要的事情我要说三遍。(偶尔私心一下..必须宣传)\nT沙龙已经成功的在北京举办了很多次。像巧大啊，还有臧成威啊，还有虾神，还有sunny神都参加过，总之就是，非常成功。\nT沙龙真的是要把热爱Swift的人聚集在一起，分享，交流。\n成都这是第一次，当然组织者就是畅叔，蛋哥，还有蓉姐，我是打杂的。\n之后，大家自我介绍了。其实程序员是个很开朗的职业，很能扯，很多好玩的。所以大家的自我介绍也很开心欢乐，之后就开始分享啦。\n从零开始写一个Argo —— ThoughtWork方志刚 必须要先隆重的介绍一下方志刚。我科大的学长，和蛋哥一届的。但是现在一看，蛋哥仿佛被完爆了\u0026hellip;\n方志刚分享的是从零开始写一个Argo。Argo是一个解析json的三方库。方志刚采用的方式是..VNC..！！就是远程操控了投影的电脑，然后现场一步一步写来展示整个的过程。\n这种形式我是服了。(十分后悔没有用电脑记录一下\u0026hellip;现在写这个实在是费劲，想在技术上记录点东西都没机会..)\n开始的时候实现了一个简单的parser，然后逐步完善功能。\n针对Argo可能存在的一些问题进行了解决。\n开始的时候是利用Swift的函数式特性先写了一个简单的parser。之后在此基础上进行了完善。然后写了一个Functor..到这其实我已经有点晕了。不过后面活过来了。\n但在此基础上调用方法的话还是显得复杂，于是方志刚用了Swift的运算符重载..用这种方法对方法的调用，只需要用重载后的运算符就行了。\n当然，在写的时候可能会出现参数过多的问题，这是camera360的高山问的..之后方志刚推荐了一个很赞的库，curry，对就是库里..在函数式编程中很重要的一个概念，科里化。利用这个可以无论多长的函数都可以。高山说，在RAC中，写了很长的宏，宏\u0026hellip;\u0026hellip;\n之后，就是如果我们在写的时候出现\u0026quot;user.name\u0026quot;这种情况的时候，怎么让我的parse可以解析到后面的name。如果在haskell中，foldl，我没记错是这么个函数。用这个函数可以获得最后的那个字符串。\n方志刚提到，由于在Swift中没有foldl，所以我们先reverse一下，然后在解析就可以了。厉害。我是服了。\n之后的茶歇时间，之所以我后面这块记得那么清楚，是因为我在茶歇时间和他交流了一下..方志刚人很nice啊，我问最后reverse的时候他超级耐心的和我解释了，他一说foldl我就明白大概了..我还问了运算符重载在haskell的地方，他说他不知道，我问他学过haskell没，他来了一句，我都是用到再查\u0026hellip;当时就跪了，瞬间智商碾压啊。我TM按顺序看都看不懂啊！！人家就直接stackoverflow查给我看了。他还问我是不是学过，有个free monad的概念很烧脑\u0026hellip;我说我没学过..所以我准备后面几天学一下然后下次有机会当面再交流一下monad。\n包括茶歇时间听蛋哥和许国卿和TW的另一外工程师官勤交流了一下函数式在生产环境里的使用，真的是，受益匪浅。\nRethink NSNotifucation in Swift —— Camera360高山 高山是camera360的iOS开发工程师。**我科大学长。**他分享了他在平时开发中对于回调，通知，这些使用的一些心得，同时分享了他们团队利用RAC来代替这些的方法。\n虽然没有方志刚那种现场写代码的感觉，但是还是有很多收获。\n之后高山提出了关于RAC的一些问题我们讨论了一下，觉得还是很棒的~\n茶歇 茶歇之所以单独提出来，是因为我们买了奇葩饮料\u0026hellip;陈佳因为来迟到了，喝了崂山🐍水。我喝了，难喝死了。\n茶歇各种闲扯交流，也是受益匪浅。\nwwdc讨论 畅叔和蛋哥在嘉宾分享之后加了一个环节就是wwdc的讨论，因为前几天才开了wwdc..由我开头，我之前写了一片博客，提到了apple逼死了一波软件。之后又提到了ipad上的swift playground..我说我觉得那个好鸡肋，本来准备买ipad的都不打算买了。我刚说完。陈佳拿出iOS10的ipad说没有那么坑。\n然后大家就开始围观playground啊！！我们用quicktime把ipad投影出来，然后方志刚在ipad上写了几段代码。当时那种感觉，就是，我可以考虑买ipad！\n因为当时觉得就是一个给娃娃学编程的软件..现在发现还是有实际用处的，可以写动画，而且苹果把Uikit都给封装进去了。非常的nice。\n如果不是陈佳，我就真觉得苹果坑了。\n之后蛋哥说了他看的session，提到了最新的Session 219 What’s New in UICollectionView in iOS 10。就是苹果官方对collectionview进行了优化。Session 414 Using and Extending the Xcode Source Editor。Xcode提供了更加的强大的编辑功能！蓉姐还提到了Session 406 Optimizing App Startup Time..大家纷纷表示国内厂商都用这个做广告..大家纷纷针对这些都讨论了一下。还是很有收获的。\n之后，都准备合影了..许国卿和陈佳开始玩起了iOS10的iMessage..我勒个去，那个酷炫，我是服了。当时准备录小视频的，没来及。\n感想\u0026amp;心得 其实我觉得，现场的边写代码边讲超级过瘾，尤其还是函数式。\n很早之前我就觉得，函数式迟早会火。这种上古的语言，是时候重新回归到大众的眼前了。Swift给了那么一个契机，让程序员们去学习，去了解这么一门博大精深的编程语言。这是Swift的功劳，不得不承认。这次沙龙结束，我也有更加充分的理由去强迫性的去让工作室的娃们学习函数式。\n听完方志刚的分享，我这次下狠心学haskell了，为了下次可以很好的交流一下free monad..不过我估计我一个月学不会。因为太难了。\n这次交流不仅听到了大牛的分享，终于见到蓉姐和畅叔，畅叔没有想象的帅，蓉姐比我想象的要厉害。蛋哥，蛋哥很早之前就认识了。蛋哥的故事，是可以完完整整写一篇博客的。我真的，每次想到蛋哥，除了佩服还是佩服。\n说实话，我觉得这次沙龙比较成功，认识了很多大神啊！而且真的不仅学到了东西，还了解了很多camera360公司写代码的一些方式，还有TW的一些工作方式，真的觉得不错啊。\n最主要的是，科大撑起半边天。\n这次去完，真的觉得。这句话要单独提出来说。\nSwift改变世界！\nSwift值得所有人去学习，这门新兴的语言，必将走上历史的顶峰。此处必须表达一下我对某门语言的态度。后台迟早都是Swift，安卓迟早也是Swift。对我就是想说，那门可以干这两件事情的语言，你迟早gg。\n我相信，\u0026lt;T\u0026gt;沙龙在成都会越来越好的。\n感谢 真的，还是感谢。超级感谢，其实第一个感谢的应该是网红梁杰，也就是蛋哥老说的帮主。没有帮主的组织，不可能有 T 沙龙。\n其次要感谢的，当然是畅叔，蛋哥，蓉姐。没有他们的组织，也就没有成都这次的沙龙。\n当然，要感谢泊学和camera360（按照我博客的访问量，此处赞助商应该加钱）。没有赞助，也没有这次沙龙的资金和场地。\n当然的当然，感谢方志刚和高山的分享，还有大家的很多交流，学到了很多很多东西。\n从现在，哦，不，从那天晚上开始，我其实就已经开始期待下一次的沙龙了。\n","permalink":"http://localhost:1313/posts/chengdu-tsalon-notes/","summary":"耽误了那么久才开始写，因为连续考了三天试..那天晚上和坦坦回学校的时候朋友圈发了好长一截，我怕我忘了..闲话少说，开始记录一下吧~\n总体给我的感觉，很赞，真心很赞。这算是我第一次参加技术沙龙，Swift的。\n时间是上周日，19号。我和坦坦，下文统一为蛋哥。我和蛋哥约在活动中心见面，然后打uber去了天府软件园。去了之后和蛋哥一起吃了KFC，然后就坐在那等蓉姐和肠叔。其实之前和蛋哥有过交流，后来蓉姐来了。我简直就是作为一个记者一样，对蓉姐进行了一个采访，从蓉姐学iOS到工作，问了个遍，下次可以带着录音笔，出个采访稿也是不错的。\n首见蓉姐 蓉姐为啥要单独提出来说？**因为蓉姐是一个做iOS开发的女孩。**对，女孩..\n蓉姐和我想象的完全不一样，蓉姐作为一个女孩写iOS，我心里是很佩服的。我从来没有看不起女程序员，我是超级佩服。因为工作室很多学妹在学习编程上都存在大大小小的问题。所以我也问了蓉姐很多问题。蓉姐也超级耐心的和我解答。\n蓉姐大三开始学iOS，现在在做智能玩具。我看了蓉姐的博客，写了一个蓝牙的系列，很nice。我还咨询了蓉姐一下iBeacon的问题，蓉姐说其实原生的api其实足够，但是蓝牙也有很多坑。蓉姐还做过php，大一学了c语言之后就做编程了。\n蓉姐大概还是个摄影爱好者，相机和脚架很齐全，我很佩服。蓉姐说她在深圳的公司的时候压力很大也坚持下来了。总之，和蓉姐简短的聊天，除了佩服就剩佩服了。有那么一点女汗子的感觉，蓉姐的经历可以让我以后和工作室的学妹说，编程，从来不是难事，是努力可以做好的事情。\n我和蛋哥蓉姐回合之后就去了camera360，沙龙在camera360举办，环境超级nice。我很喜欢那里的办公环境，理由很简单，我进去就看到了运动器械\u0026hellip;跑步机瑜伽球乒乓球桌投篮机一应俱全。\n之后就一起排了一下座位。等大家到起齐就开始了。\n畅叔开场 稍微介绍一下畅叔。畅叔是帮主的大学同学，帮主就是T沙龙的总司令梁杰，梁杰是跨界网红。畅叔之所以叫畅叔就是因为畅叔年级轻轻看上去好老\u0026hellip;是真的。当然畅叔也是跨界。\n畅叔先是感谢了泊学的赞助~还有camera360的场地提供。\n畅叔先是大概介绍了T沙龙的起因以及T沙龙的形式。T沙龙真的要开遍全国，每个月举办线下的沙龙。最重要的是，非盈利，不收费，非盈利，不收费，非盈利，不收费。重要的事情我要说三遍。(偶尔私心一下..必须宣传)\nT沙龙已经成功的在北京举办了很多次。像巧大啊，还有臧成威啊，还有虾神，还有sunny神都参加过，总之就是，非常成功。\nT沙龙真的是要把热爱Swift的人聚集在一起，分享，交流。\n成都这是第一次，当然组织者就是畅叔，蛋哥，还有蓉姐，我是打杂的。\n之后，大家自我介绍了。其实程序员是个很开朗的职业，很能扯，很多好玩的。所以大家的自我介绍也很开心欢乐，之后就开始分享啦。\n从零开始写一个Argo —— ThoughtWork方志刚 必须要先隆重的介绍一下方志刚。我科大的学长，和蛋哥一届的。但是现在一看，蛋哥仿佛被完爆了\u0026hellip;\n方志刚分享的是从零开始写一个Argo。Argo是一个解析json的三方库。方志刚采用的方式是..VNC..！！就是远程操控了投影的电脑，然后现场一步一步写来展示整个的过程。\n这种形式我是服了。(十分后悔没有用电脑记录一下\u0026hellip;现在写这个实在是费劲，想在技术上记录点东西都没机会..)\n开始的时候实现了一个简单的parser，然后逐步完善功能。\n针对Argo可能存在的一些问题进行了解决。\n开始的时候是利用Swift的函数式特性先写了一个简单的parser。之后在此基础上进行了完善。然后写了一个Functor..到这其实我已经有点晕了。不过后面活过来了。\n但在此基础上调用方法的话还是显得复杂，于是方志刚用了Swift的运算符重载..用这种方法对方法的调用，只需要用重载后的运算符就行了。\n当然，在写的时候可能会出现参数过多的问题，这是camera360的高山问的..之后方志刚推荐了一个很赞的库，curry，对就是库里..在函数式编程中很重要的一个概念，科里化。利用这个可以无论多长的函数都可以。高山说，在RAC中，写了很长的宏，宏\u0026hellip;\u0026hellip;\n之后，就是如果我们在写的时候出现\u0026quot;user.name\u0026quot;这种情况的时候，怎么让我的parse可以解析到后面的name。如果在haskell中，foldl，我没记错是这么个函数。用这个函数可以获得最后的那个字符串。\n方志刚提到，由于在Swift中没有foldl，所以我们先reverse一下，然后在解析就可以了。厉害。我是服了。\n之后的茶歇时间，之所以我后面这块记得那么清楚，是因为我在茶歇时间和他交流了一下..方志刚人很nice啊，我问最后reverse的时候他超级耐心的和我解释了，他一说foldl我就明白大概了..我还问了运算符重载在haskell的地方，他说他不知道，我问他学过haskell没，他来了一句，我都是用到再查\u0026hellip;当时就跪了，瞬间智商碾压啊。我TM按顺序看都看不懂啊！！人家就直接stackoverflow查给我看了。他还问我是不是学过，有个free monad的概念很烧脑\u0026hellip;我说我没学过..所以我准备后面几天学一下然后下次有机会当面再交流一下monad。\n包括茶歇时间听蛋哥和许国卿和TW的另一外工程师官勤交流了一下函数式在生产环境里的使用，真的是，受益匪浅。\nRethink NSNotifucation in Swift —— Camera360高山 高山是camera360的iOS开发工程师。**我科大学长。**他分享了他在平时开发中对于回调，通知，这些使用的一些心得，同时分享了他们团队利用RAC来代替这些的方法。\n虽然没有方志刚那种现场写代码的感觉，但是还是有很多收获。\n之后高山提出了关于RAC的一些问题我们讨论了一下，觉得还是很棒的~\n茶歇 茶歇之所以单独提出来，是因为我们买了奇葩饮料\u0026hellip;陈佳因为来迟到了，喝了崂山🐍水。我喝了，难喝死了。\n茶歇各种闲扯交流，也是受益匪浅。\nwwdc讨论 畅叔和蛋哥在嘉宾分享之后加了一个环节就是wwdc的讨论，因为前几天才开了wwdc..由我开头，我之前写了一片博客，提到了apple逼死了一波软件。之后又提到了ipad上的swift playground..我说我觉得那个好鸡肋，本来准备买ipad的都不打算买了。我刚说完。陈佳拿出iOS10的ipad说没有那么坑。\n然后大家就开始围观playground啊！！我们用quicktime把ipad投影出来，然后方志刚在ipad上写了几段代码。当时那种感觉，就是，我可以考虑买ipad！\n因为当时觉得就是一个给娃娃学编程的软件..现在发现还是有实际用处的，可以写动画，而且苹果把Uikit都给封装进去了。非常的nice。\n如果不是陈佳，我就真觉得苹果坑了。\n之后蛋哥说了他看的session，提到了最新的Session 219 What’s New in UICollectionView in iOS 10。就是苹果官方对collectionview进行了优化。Session 414 Using and Extending the Xcode Source Editor。Xcode提供了更加的强大的编辑功能！蓉姐还提到了Session 406 Optimizing App Startup Time.","title":"成都T技术沙龙小记"},{"content":"昨晚上十一点多就开始上床，然后快一点起来看了wwdc大会。\n这是我开发两年以来第一次看wwdc大会，本来不想写的..天天复习考试也不想写。刚刚看到巧大写了一篇微信，我决定也写一篇。\n首先想抱歉一下昨晚上和今天一大早朋友圈的朋友们，被我刷屏了，第一次看未免有点激动。也算是做个记录，后来都删除了只保留了短的。我相信这一定是很多人看到自言自语最长的朋友圈了。\n过去的很长时间里，我彻底的开始对mac和iOS的软件开始了狂热，各种买买买和体验，偶尔还自己想想咋做的。所以这次发布会看到macOS还是很激动的。下面依次来说。\nwatchOS 说实话，我对watch没啥感觉，因为太小了。不过这次watch推出了几个功能我很期待，一个就是加入了游戏的引擎，一个是可以在watch上手写字。游戏这个东西，其实在watch上还有很大想象力。所以，值得期待。\n其他我觉得watch最让我喜欢的，是和健康一系列相关的东西，比如一个叫做breath的app，感觉很符合我的口味。虽然感觉高仿了pause。\nmacOS 改名了，真改名了。从OS X到macOS，以后stackoverflow怎么搜索..驼峰命名也是服。\n不过说实话，我超级喜欢。超级期待Sierra。\n最新的版本叫Sierra，我想是不是因为集成了siri进去。\n终于可以自动解锁，超爱。\n剪切板和iphone同步，超爱。\n存储优化，刚刚看巧大的文章说是放到icloud，顿时没期待了。。\napple pay要和支付宝进行狙击战了。\n还有通知中心可以放文件，这个超期待。一直觉得mac的通知中心没有什么用处，超级鸡肋，这下通知中心可以用起来了。\n说实话，siri for mac真的值得期待，就是，我一直觉得对着电脑说话很奇怪..不过siri确实提供了很多东西，值得体验。\n虽然吐槽说，逼死了很多软件，但是说实话，就解锁，剪切板，通知中心，我就非常期待了！！\niOS 推了10。\n总结一下，就是iMessage要爆炸。\n整个iOS10最大的亮点就是iMessage。infoq的群里都在说微信和iMessage\u0026hellip;说就差个朋友圈了。\n不过说实话，这个可以聊聊。\n苹果想好好搞，你真的搞不过它。iMessage设计的，无比的充满想象力。各种神奇的效果，我简直。服了！！！iMessage值得体验。我觉得微信的聊天比起iMessage弱爆了。\niMessage把聊天气泡做的让我觉得，充满了感情。就是这么个感觉。\n各种对于图片的效果，包括全屏效果也是，让我觉得更适合去表达感情。就这，就够了，超级nice。\n然后就是通知中心这个，有人说像安卓，这么一听，是有点像\u0026hellip;\napple music和地图说实话，我不是很期待，因为music我觉得还是不好看。地图的话，得体验才能知道，国内高德什么的还是挺不错的。\n苹果特意强调了加密，这点是作为一个大公司来说很重要的。\n最后想说说homekit。看苹果这样，想做一套，智能家居，然后用手机连接一切。小时候看虹猫蓝兔3000问，那时候说智能家居，各种神奇的控制，现在看来，不远了。我很期待那一天。\n对了，siri可以发微信了..我也是，服了。\nSwift 推出了swift playground..很多人以为是ipad上可以写代码了。\n尼玛，就是一个给娃娃学编程的软件。\n本来想攒钱买ipad的都不想买了。但是可以预见，ipad写代码，这是迟早的事情。\n没说Swift3，我表示很失望。\n小细节 库里三上发布会 虽然今天输球了。但是库里真的是影响力大，湾区和硅谷也是近。据说勇士已经打入硅谷内部了。\nwatchOS，macOS和iOS都出现库里了。\n表示我库很厉害。\n又逼死一波软件 MacID，nearlock，clean my mac。\n其他 据说Xcode8很值得期待。图像可以直接预览，支持官方插件。没仔细看。\n内置app可以删除一部分了，这个很好。\n对于开发者，说实话，我现在觉得watchOS和macOS的市场很大。远超于iOS。第一年看wwdc，只聊我看到的，其他也没花时间看，不多说。网上写的好的比我多了去了。\n感觉上没有特别大的api的变化，当然这些新的extension是要去关注的。具体的，巧大的还有cyan大神都写了我也不多说，最后放链接。\n最后 开发两年，第一年看wwdc，很感慨，失望和希望并存。失望更多的是Swift上面。其他没啥。希望，当然是我超爱的macOS啦。\n未来的一年，我的重心可能会偏mac开发上。资金足够，入watch，顺便看看watchOS的游戏。\n最后附上我昨晚上疯狂的朋友圈\u0026hellip;这也是我今天这篇博客内容的主要来源。\n希望明年我还能充满热情的看wwdc这是我看的第一次，希望有机会可以去现场看\n可以参考的链接\nWWDC2016 随想\niOS 10 给开发者带来了什么\nWWDC 2016 Videos\n亲测 iOS 10：有些新功能，苹果居然没有告诉你\nWWDC 2016 Initial Impressions\n","permalink":"http://localhost:1313/posts/2016-wwdc/","summary":"昨晚上十一点多就开始上床，然后快一点起来看了wwdc大会。\n这是我开发两年以来第一次看wwdc大会，本来不想写的..天天复习考试也不想写。刚刚看到巧大写了一篇微信，我决定也写一篇。\n首先想抱歉一下昨晚上和今天一大早朋友圈的朋友们，被我刷屏了，第一次看未免有点激动。也算是做个记录，后来都删除了只保留了短的。我相信这一定是很多人看到自言自语最长的朋友圈了。\n过去的很长时间里，我彻底的开始对mac和iOS的软件开始了狂热，各种买买买和体验，偶尔还自己想想咋做的。所以这次发布会看到macOS还是很激动的。下面依次来说。\nwatchOS 说实话，我对watch没啥感觉，因为太小了。不过这次watch推出了几个功能我很期待，一个就是加入了游戏的引擎，一个是可以在watch上手写字。游戏这个东西，其实在watch上还有很大想象力。所以，值得期待。\n其他我觉得watch最让我喜欢的，是和健康一系列相关的东西，比如一个叫做breath的app，感觉很符合我的口味。虽然感觉高仿了pause。\nmacOS 改名了，真改名了。从OS X到macOS，以后stackoverflow怎么搜索..驼峰命名也是服。\n不过说实话，我超级喜欢。超级期待Sierra。\n最新的版本叫Sierra，我想是不是因为集成了siri进去。\n终于可以自动解锁，超爱。\n剪切板和iphone同步，超爱。\n存储优化，刚刚看巧大的文章说是放到icloud，顿时没期待了。。\napple pay要和支付宝进行狙击战了。\n还有通知中心可以放文件，这个超期待。一直觉得mac的通知中心没有什么用处，超级鸡肋，这下通知中心可以用起来了。\n说实话，siri for mac真的值得期待，就是，我一直觉得对着电脑说话很奇怪..不过siri确实提供了很多东西，值得体验。\n虽然吐槽说，逼死了很多软件，但是说实话，就解锁，剪切板，通知中心，我就非常期待了！！\niOS 推了10。\n总结一下，就是iMessage要爆炸。\n整个iOS10最大的亮点就是iMessage。infoq的群里都在说微信和iMessage\u0026hellip;说就差个朋友圈了。\n不过说实话，这个可以聊聊。\n苹果想好好搞，你真的搞不过它。iMessage设计的，无比的充满想象力。各种神奇的效果，我简直。服了！！！iMessage值得体验。我觉得微信的聊天比起iMessage弱爆了。\niMessage把聊天气泡做的让我觉得，充满了感情。就是这么个感觉。\n各种对于图片的效果，包括全屏效果也是，让我觉得更适合去表达感情。就这，就够了，超级nice。\n然后就是通知中心这个，有人说像安卓，这么一听，是有点像\u0026hellip;\napple music和地图说实话，我不是很期待，因为music我觉得还是不好看。地图的话，得体验才能知道，国内高德什么的还是挺不错的。\n苹果特意强调了加密，这点是作为一个大公司来说很重要的。\n最后想说说homekit。看苹果这样，想做一套，智能家居，然后用手机连接一切。小时候看虹猫蓝兔3000问，那时候说智能家居，各种神奇的控制，现在看来，不远了。我很期待那一天。\n对了，siri可以发微信了..我也是，服了。\nSwift 推出了swift playground..很多人以为是ipad上可以写代码了。\n尼玛，就是一个给娃娃学编程的软件。\n本来想攒钱买ipad的都不想买了。但是可以预见，ipad写代码，这是迟早的事情。\n没说Swift3，我表示很失望。\n小细节 库里三上发布会 虽然今天输球了。但是库里真的是影响力大，湾区和硅谷也是近。据说勇士已经打入硅谷内部了。\nwatchOS，macOS和iOS都出现库里了。\n表示我库很厉害。\n又逼死一波软件 MacID，nearlock，clean my mac。\n其他 据说Xcode8很值得期待。图像可以直接预览，支持官方插件。没仔细看。\n内置app可以删除一部分了，这个很好。\n对于开发者，说实话，我现在觉得watchOS和macOS的市场很大。远超于iOS。第一年看wwdc，只聊我看到的，其他也没花时间看，不多说。网上写的好的比我多了去了。\n感觉上没有特别大的api的变化，当然这些新的extension是要去关注的。具体的，巧大的还有cyan大神都写了我也不多说，最后放链接。\n最后 开发两年，第一年看wwdc，很感慨，失望和希望并存。失望更多的是Swift上面。其他没啥。希望，当然是我超爱的macOS啦。\n未来的一年，我的重心可能会偏mac开发上。资金足够，入watch，顺便看看watchOS的游戏。\n最后附上我昨晚上疯狂的朋友圈\u0026hellip;这也是我今天这篇博客内容的主要来源。\n希望明年我还能充满热情的看wwdc这是我看的第一次，希望有机会可以去现场看\n可以参考的链接\nWWDC2016 随想\niOS 10 给开发者带来了什么\nWWDC 2016 Videos","title":"我的第一次wwdc小记"},{"content":"11个月前，有一款mac软件，叫做Foldery。pinapps推荐了。简单的说，可以把mac下蓝色的文件夹换成其他颜色。\n那时候限免不知道为啥没买。最近在想它怎么实现的。因为现在要花12块钱才能买来使用，我印象中是替换颜色，所以我一直以为是把系统所有文件夹的颜色都替换了。于是就按照这个思路往下想。首先想到的是Applescript修改finder属性，但是经过一番查询，这条路失败了。这应该是上上周干的了..然后就想有没有接口可以，有，apple提供了Finder Sync extension的接口，可以增加finder的角标还有sidebar icon。不过下载了一下demo看了一眼api，只能对finder进行一些简单的操作。附一句，dropbox就这么干的。不过，这条路就这么死了。\n然后就开始思考xtrafinder怎么干的，上星期的时候看到了inject code in finder，有两个github的项目mach_override，mach_inject，xtrafinder应该就是这么干的。但是想了想，人家上架了appstore。应该不会那么复杂吧，而且权限应该还不够。这条路，也死了。\n之后想，是不是applescript有接口。结果我把一本Basics of AppleScript翻完了都想不到原理。\n最后就到了昨天。昨天的查着查着看到系统图标的位置。其实finder什么的都是mac app，mac下可以看到resource，修改系统图标就都修改了。经过一番尝试，图标格式icns好像，神奇的格式。就是苹果专业图标格式。后来才发现可以直接用preview改\u0026hellip;找到系统的图标处准备修改，发现没有权限，不过想了想应该就是这么干的了。\n现在要解决权限问题，mac升级之后，对系统进行了保护，要关保护。见我的Mac升级10.11 EI Captain 填坑那篇文章。然后应该就可以解决权限问题了。不过这么着干和xtrafiner差不多了。想想肯定不能上架。万念俱灰。准备查查网上有没有这方面的文章，结果尼玛，我查到了Foldery的源码，在github上。本来不想看了，后来想想差不多也完成整个思路的整理了。进去一看，直接NSWorkspace获取当前文件夹的图标位置然后覆盖一层拉倒。想想不对啊，不是全部替换嘛，后来仔细一看才发现，是单独替换。\n就这样，历时快两周，完成了一次伟大的踩坑。\n","permalink":"http://localhost:1313/posts/a-crack-of-mac-app-foldery/","summary":"11个月前，有一款mac软件，叫做Foldery。pinapps推荐了。简单的说，可以把mac下蓝色的文件夹换成其他颜色。\n那时候限免不知道为啥没买。最近在想它怎么实现的。因为现在要花12块钱才能买来使用，我印象中是替换颜色，所以我一直以为是把系统所有文件夹的颜色都替换了。于是就按照这个思路往下想。首先想到的是Applescript修改finder属性，但是经过一番查询，这条路失败了。这应该是上上周干的了..然后就想有没有接口可以，有，apple提供了Finder Sync extension的接口，可以增加finder的角标还有sidebar icon。不过下载了一下demo看了一眼api，只能对finder进行一些简单的操作。附一句，dropbox就这么干的。不过，这条路就这么死了。\n然后就开始思考xtrafinder怎么干的，上星期的时候看到了inject code in finder，有两个github的项目mach_override，mach_inject，xtrafinder应该就是这么干的。但是想了想，人家上架了appstore。应该不会那么复杂吧，而且权限应该还不够。这条路，也死了。\n之后想，是不是applescript有接口。结果我把一本Basics of AppleScript翻完了都想不到原理。\n最后就到了昨天。昨天的查着查着看到系统图标的位置。其实finder什么的都是mac app，mac下可以看到resource，修改系统图标就都修改了。经过一番尝试，图标格式icns好像，神奇的格式。就是苹果专业图标格式。后来才发现可以直接用preview改\u0026hellip;找到系统的图标处准备修改，发现没有权限，不过想了想应该就是这么干的了。\n现在要解决权限问题，mac升级之后，对系统进行了保护，要关保护。见我的Mac升级10.11 EI Captain 填坑那篇文章。然后应该就可以解决权限问题了。不过这么着干和xtrafiner差不多了。想想肯定不能上架。万念俱灰。准备查查网上有没有这方面的文章，结果尼玛，我查到了Foldery的源码，在github上。本来不想看了，后来想想差不多也完成整个思路的整理了。进去一看，直接NSWorkspace获取当前文件夹的图标位置然后覆盖一层拉倒。想想不对啊，不是全部替换嘛，后来仔细一看才发现，是单独替换。\n就这样，历时快两周，完成了一次伟大的踩坑。","title":"记一次Mac软件的踩坑过程"},{"content":"张哥在写Github系列，看到了想帮张哥分担一下。正好工作室的学弟学妹们也需要会这个，就正好写个博客了。\n因为我是iOS开发出生..所以我就从iOS的角度来写怎么用，不过放心，Android没有什么大的差别，我们后台的学弟都是这么干的！\n看完张哥的文章，大概已经明白了Github是怎么使用的。但我想大部分人是想用Github里面的三方库，想去看看别人的开源项目的源代码，想去看看最近有没有什么新的牛逼的代码。但是怎么去找到这些东西呢。我想介绍的就是这方面的东西。\n看Explore和Trending 大部分人的Github顶部栏可能是这样的\u0026hellip;\n但我的是这样的\u0026hellip;\n看到差别了吗？右上角我的比你们多了一个Explore\u0026hellip;记得我大二的时候Github改版，把Explore去掉了，当时好像骂声一片。有人开发了一款插件。Github Menu Back说白了这玩意就是在你的Github顶部栏加上Explore，然后把你的头像放左边。足以见到Explore的重要性（不过这玩意得网站加载差不多才能出来..）。当然了要是不愿意用这个，可以点击头像，里面也有。如下图\n我们点击一个看看。\n进去之后左上角有四个选项。\n一个一个介绍哈。\n第一个 Showcases 第一个其实就是这个界面，点过去没啥区别。\n就是按照某个方面，比如Package managers（其实就是三方库的管理器）。点进去里面都是某门语言的包管理器，比如iOS的cocoapods，前端的npm，vim的vundle。类比到Android里面应该就是Gradle了。不过这里应该没有Gradle..\n比如还有web application frameworks，其实就是后台框架，肯定有rails的。\n具体我就不介绍了。可以点进去看。在最下面有More showcases。\n第二个 Integrations Powerful integrations that help you and your team build software better, together.\n其实就是一些工具的整合，可以更好的开发。\n点进去里面有很多工具，比如Travis ci，这个现在用的很多，还有Github自家的编辑器Atom等等。\n这个得自己发掘了..不多介绍。\n第四个 Stars。 为啥跳第三个？因为第三个是重点\u0026hellip;重要的放最后。\n点Stars就会进入你Star过的项目里啦。这没啥好介绍的。也就不截图了。\n第三个 Trending。 好像有人曾经在知乎问过，程序员无聊的时候干什么。结果下面有人说，我逛Github能逛一上午\u0026hellip;自从我发现Trending之后，我发现我也可以！\nTrending说白了，就是某个时间段里Github上被star数量最多的项目和仓库被star数量最多的开发者！\n我要一点一点仔细的介绍这个！\n首先是左上角的。\n这两个，是切换仓库和开发者的。\n这里是切换时间的，可以选择天，周，和月。也就是每天每周每月被star次数最多的仓库。我以前上过一次Trending..完全不知道它这个算法咋写的，莫名其妙就上了，当然我上的是天..\n最牛逼的，是右边，右边！！\n你以为这就结束了？作为一个职业的开发者，你当然要找到自己的方面。我最为一个iOS开发者，当然是Objective-C和Swift了，偶尔我也会看一看ruby的。当然了，安卓一定要看java了什么？没有java？选择other language即可\n当日期选择天的时候，一般会是一些开发者在微博@一些大v，然后引起一时轰动的项目，当然也有大项目。这些项目一般来说我觉得吧，质量参差不齐，有的很好有的也就一般..\n当日期选择月的时候，那基本上就是一些很牛逼的库了，这些库一般来说真的是，开发项目必备了。这个质量，那绝对是，刚刚的。\n现在语言选java，选today看下。\n我写博客的时候语言选择java的时候是这样的..这时候就能发现完整的开源项目代码了。还有一些新出的开源库。这个时候，一般我来说，看到我觉得不错的，果断下载下来阅读一下代码。觉得代码牛逼，立马star..都不带停顿的，有的库，我就直接star了..因为太牛逼看不懂。\nTrending基本上我隔个几天就会看一次，有的时候闲了，每天都会看，真的一看一上午，因为有时候顺手就下载下来看看里面的代码，看看差距了..\n我们再选个month看看。\n第一个，我都知道谷歌出的flexbox-layout..你看我一做iOS的都知道，那基本上就是非常非常值得开发者去用和学习的库了。\nTrending会了，基本上能发现不少牛逼的开源库和开源的项目。这样就有的学习了。\n你以为到这大招就放完了吗？怎么可能。\nawesome系列 上Github，怎么能不知道awesome系列，这可是Github上总star数排名第十二的仓库。到我写文章的时候，35714star。\n当然衍生的有各种awesome\u0026hellip;比如awesome-ios，awesome-android，awesome-java，awesome-android\nawesome。这玩意干啥的？简单的说，就是对某一个方面Github上的资源的汇总大贴！\n不想上Trending查，那就上awesome，帮你解决一切问题。比如awesome-android上有网络请求库，json解析库等等一系列功能的汇总，当然了，还有完整项目的汇总，我就不找了..毕竟iOS出生，安卓不熟悉。\n你以为到这大招就放完了吗？怎么可能。\nfree-programming-books 这可是Github上总star数排名第三的仓库。到我写文章的时候，55328star。\n免费的电子书！最重要的是，有中文的，有中文的，有中文的..重要的事情说三遍。虽然我推荐还是看英文，因为某些翻译简直爆炸。free-programming-books-zh地址放这了~\n你以为到这大招就放完了吗？怎么可能。\n搜索！ 为啥加感叹号？因为这个功能，太牛逼了。\n这个得举例说明\u0026hellip;对了插一句，Github有时候访问超级慢。我都是走代理走的..\n现在我们进到搜索界面，尝试搜索一下alert。\n什么，哇好多但是我现在要搜索Swift的资源怎么办？左边有语言选择！点完就能进去。\n什么，我要的语言没有，我想查一下ruby的alertview。那么，在搜索框输入，language:c就可以啦~\n什么，这些星星星数好少啊。左边有选择哦，可以选择星星数量排序。\n什么，我要1000star以上的项目！输入框加上stars:\u0026gt;=500!当然可以和language组合了~\n什么，我要查找fork过的仓库，很多人会fork一份自己加很多东西，加上 fork:true就可以啦。\n什么，你想查找的不是人时代码或者组织或者是人？左上角选择啦。\n什么，我怎么知道这么多？看选择语言的下面！\n在Cheat sheet里面有的！\n什么，我懒得记那么多啊？在Advanced search里面可以输入的！\n当然了，有时候我会觉得Github自身的搜索不行..我就会上谷歌..直接Github + 关键字..\n不过大部分时间还是可以的。\n这样的话，如果我在搜索框输入个star数量，（不能什么都不输入！因为有限制！），就可以看到Github上仓库的star排名了~\nGithub API Github作为全世界最大同性交友网站，当然会开放接口了。可以自己做很多基于Github的客户端，也是一个练手的好方法。\n在网站的最下面找API，点进去就可以啦。里面有很多开放接口，基本都是json格式的接口，用来做一个移动应用真是再好不过啦。\n网址 Overview\n我就不详细介绍了。\n最后 以上，是我用Github那么久以来的一点感受。我一直觉得，学习写代码，最好的地方，就是Github，大量的看别人的源码，别人的开源库，能和世界上最顶尖的开发者一起学习，多么开心的一件事情~\n对了，插一句。在iOS开发界有一个人，他是优酷的开发者，因为发布了几个很牛逼的库，收到了facebook和uber的offer！他说他的学习方式，就是上Github看源码，然后自己琢磨写。\n所以，我们都加油吧~\n","permalink":"http://localhost:1313/posts/github-search-use/","summary":"张哥在写Github系列，看到了想帮张哥分担一下。正好工作室的学弟学妹们也需要会这个，就正好写个博客了。\n因为我是iOS开发出生..所以我就从iOS的角度来写怎么用，不过放心，Android没有什么大的差别，我们后台的学弟都是这么干的！\n看完张哥的文章，大概已经明白了Github是怎么使用的。但我想大部分人是想用Github里面的三方库，想去看看别人的开源项目的源代码，想去看看最近有没有什么新的牛逼的代码。但是怎么去找到这些东西呢。我想介绍的就是这方面的东西。\n看Explore和Trending 大部分人的Github顶部栏可能是这样的\u0026hellip;\n但我的是这样的\u0026hellip;\n看到差别了吗？右上角我的比你们多了一个Explore\u0026hellip;记得我大二的时候Github改版，把Explore去掉了，当时好像骂声一片。有人开发了一款插件。Github Menu Back说白了这玩意就是在你的Github顶部栏加上Explore，然后把你的头像放左边。足以见到Explore的重要性（不过这玩意得网站加载差不多才能出来..）。当然了要是不愿意用这个，可以点击头像，里面也有。如下图\n我们点击一个看看。\n进去之后左上角有四个选项。\n一个一个介绍哈。\n第一个 Showcases 第一个其实就是这个界面，点过去没啥区别。\n就是按照某个方面，比如Package managers（其实就是三方库的管理器）。点进去里面都是某门语言的包管理器，比如iOS的cocoapods，前端的npm，vim的vundle。类比到Android里面应该就是Gradle了。不过这里应该没有Gradle..\n比如还有web application frameworks，其实就是后台框架，肯定有rails的。\n具体我就不介绍了。可以点进去看。在最下面有More showcases。\n第二个 Integrations Powerful integrations that help you and your team build software better, together.\n其实就是一些工具的整合，可以更好的开发。\n点进去里面有很多工具，比如Travis ci，这个现在用的很多，还有Github自家的编辑器Atom等等。\n这个得自己发掘了..不多介绍。\n第四个 Stars。 为啥跳第三个？因为第三个是重点\u0026hellip;重要的放最后。\n点Stars就会进入你Star过的项目里啦。这没啥好介绍的。也就不截图了。\n第三个 Trending。 好像有人曾经在知乎问过，程序员无聊的时候干什么。结果下面有人说，我逛Github能逛一上午\u0026hellip;自从我发现Trending之后，我发现我也可以！\nTrending说白了，就是某个时间段里Github上被star数量最多的项目和仓库被star数量最多的开发者！\n我要一点一点仔细的介绍这个！\n首先是左上角的。\n这两个，是切换仓库和开发者的。\n这里是切换时间的，可以选择天，周，和月。也就是每天每周每月被star次数最多的仓库。我以前上过一次Trending..完全不知道它这个算法咋写的，莫名其妙就上了，当然我上的是天..\n最牛逼的，是右边，右边！！\n你以为这就结束了？作为一个职业的开发者，你当然要找到自己的方面。我最为一个iOS开发者，当然是Objective-C和Swift了，偶尔我也会看一看ruby的。当然了，安卓一定要看java了什么？没有java？选择other language即可\n当日期选择天的时候，一般会是一些开发者在微博@一些大v，然后引起一时轰动的项目，当然也有大项目。这些项目一般来说我觉得吧，质量参差不齐，有的很好有的也就一般..\n当日期选择月的时候，那基本上就是一些很牛逼的库了，这些库一般来说真的是，开发项目必备了。这个质量，那绝对是，刚刚的。\n现在语言选java，选today看下。\n我写博客的时候语言选择java的时候是这样的..这时候就能发现完整的开源项目代码了。还有一些新出的开源库。这个时候，一般我来说，看到我觉得不错的，果断下载下来阅读一下代码。觉得代码牛逼，立马star..都不带停顿的，有的库，我就直接star了..因为太牛逼看不懂。\nTrending基本上我隔个几天就会看一次，有的时候闲了，每天都会看，真的一看一上午，因为有时候顺手就下载下来看看里面的代码，看看差距了..\n我们再选个month看看。\n第一个，我都知道谷歌出的flexbox-layout..你看我一做iOS的都知道，那基本上就是非常非常值得开发者去用和学习的库了。\nTrending会了，基本上能发现不少牛逼的开源库和开源的项目。这样就有的学习了。\n你以为到这大招就放完了吗？怎么可能。\nawesome系列 上Github，怎么能不知道awesome系列，这可是Github上总star数排名第十二的仓库。到我写文章的时候，35714star。\n当然衍生的有各种awesome\u0026hellip;比如awesome-ios，awesome-android，awesome-java，awesome-android\nawesome。这玩意干啥的？简单的说，就是对某一个方面Github上的资源的汇总大贴！\n不想上Trending查，那就上awesome，帮你解决一切问题。比如awesome-android上有网络请求库，json解析库等等一系列功能的汇总，当然了，还有完整项目的汇总，我就不找了..毕竟iOS出生，安卓不熟悉。\n你以为到这大招就放完了吗？怎么可能。","title":"从0开始学习 GitHub 系列之「寻找代码」"},{"content":" Github地址 下载移步 release 啊，昨天忘配图了..补个github的图..\n先要感谢 这不是软文，是真的感谢。\n开发者头条是我安利过很多人的网站。因为说实话，做的真的很好。如果我觉得不好我就会换个网站开发插件了..在这里很多人会投稿一些些的好的文章。可以看到各个方面的知识。而且大部分的文章质量都很高（我已经从csdn迁移到开发者头条了）。慎哥也因为自己的投稿让自己的博客收获了很多的访问量，这对于开发者坚持写博客是一个很好的鼓励。所以，很感谢这么一个网站让我学到了很多东西。也让我扩充对整个计算机行业方面的认识不仅限于appweb还有后台了。\n无论如何要感谢开发者头条的创始人戚祥，当我在微信联系他和他说的时候，他觉得想法很好，然后让他们公司的工程师蒋春成联系了我。感到非常巧合而又幸运的是，他是我11级的学长。遇到了校友真的很亲切，和学长聊了好久啊，而且都是计算机人。蒋春成给了我很多帮助。不仅给了我很多意见，还给了我很多开发需要的素材。\n当然，还要感谢工作室的小伙伴，两台Mac电脑总是被我强行装上测试\u0026hellip;特别感谢的还有慎哥，慎哥头一回那么支持工作，不仅装上了，还提了很多意见，大写的感谢。dkk同学甚至提了issue\u0026hellip;也是厉害。\n最后，当然是感谢iOS开发大社区，摸着良心说，我写不出来Alamofire和Fuzi这种库。我只能凑合凑合尽我最大努力看源码和用去学习。没有这些为社区做贡献的大神们，也就没有很多个应用。\n起因 有开发Mac端插件的想法有两个原因，一是因为为了带小学弟，学起了Swift。二是因为看到了Tailor这个Mac端的插件。当我看到Tailor的时候我第一个想法是，卧槽，swift改变世界，第二个想法是，看上去Mac端开发也不难，估计api都差不多\u0026hellip;尝试一下吧\u0026hellip;\n然后那几天就在想图拉鼎大神的Mac软件怎么做的。。正好那几天看OpenWrt需要php，php可以调shell和系统接口。想了想，啊，Mac软件开发嘛，就是调applescript和写iOS嘛，来试试吧～\n然后我就入坑了..在这大概分享一下整个的完成过程。\n总结一句话，看源码。这学期虽然没有看什么大项目的..倒是完整的工程看了不少。我一次列在下面好了。\nTailor OS X Tutorial: Menus and Popovers in Menu Bar Apps Getting Started With OS X and Swift Tutorial: Part 1/3 producthunt-osx Fuzi 第一个就是有这个想法的来源。第二个第三个是ray上的教材，我没仔细看，直接把demo下下来的。第四个是那几天正好看到producthunt做了一个类似的，直接就下载了。Fuzi是用来解析xml的。大改就是这些东西。\n遇到的坑 遇到的第一个坑，是tableview不识别identifier\u0026hellip;后来不知道咋的自己就好了。。这个坑后来想了想，可能是改名字之后需要重新设置一下\u0026hellip;想不到其他的了。感觉就是把所有的重新设置一下自己就好了。\n第二个坑就是xml解析了。我依次尝试了Fuzi（Tailor里使用的），Kanna（这个是Yep里用到的），AEXML（这个是swiftgg在一片文章提到的），最近有看到雅虎的一个SwiftyXMLParser（这个也是swiftgg提到的），还没试验..但是看上去挺好的。\n我的思路在一开始错了，几乎所有的解析xml都是可以用xpath来解析的，但是吧，我这个人偷懒，不想去学xpath，这就导致了我一路想用css来解析，后来发现坑了。于是开始转换思路写xpath，对着Tailor的解析写，很快也就搞定了。xpath是一个很好的东西，真的值得去了解和学习一下。\n第三个坑，其实也不算坑，但是确实是个问题，就是Mac和iOS的迁移问题。正好，就那么巧\u0026hellip;虾神前几天发了一篇UXKit的公众号文章，非常值得看下。对于我这种小项目，我觉得完全可以采用UXKit的方式。虾神在里面说的比我好太多了..毕竟不是一个水平。\n不过说实话，我没想到Mac和iOS的api会差那么多。后面还是值得学习一下的。\n最后就是，我在整个项目当中，是没有用到applescript的，但是这是Mac开发很重要的东西，后面也会想办法去尝试一下applescript。这是我很遗憾的一点。\n彩蛋。\n在看Tailor的代码的时候看到了函数式编程的东西..这也算是swift语言很重要的一点，我在上一篇的博客的时候介绍了部分haskell的东西。最近有在继续haskell的学习，所以顺便提一下。\n在网络层，Tailor作者用了map函数，还用了flatmap，很好的对数据进行了分组解析再合并。这一块的代码我实在是觉得太nice了，就抄了。当然整个开发过程中很多代码都是抄的\u0026hellip;\n最后 我总和工作室的人说。要回馈这个社区，要懂得感恩。这一次我好像做了那么一点努力。这大概就是之前工作室死了的那个项目小初的初衷不忘初心吧。\n之前因为做外包，也不会很认真的去看一些很牛逼的库，就是一味的实现功能。不会去像现在这样去做点自己觉得好玩的东西，去尝试一些没尝试过的东西。至少这次做了一个东西，自己会去用。之前的外包项目，我手机里都没安装。\n而且就像蒋春成和我说的那样，这次，真的很有成就感。虽然这个代码的难度不高，实现的功能不复杂，但是做的很开心啊，也愿意去做。\n即使没有外包没有钱，一种纯“情怀”的状态。\n所谓穷开心，大概就是这么一种状态。\n祝开发者头条越来越好，我这个重度投稿者也会继续投稿我觉得质量上乘的文章的~\n","permalink":"http://localhost:1313/posts/developer-toutiao-notes/","summary":"Github地址 下载移步 release 啊，昨天忘配图了..补个github的图..\n先要感谢 这不是软文，是真的感谢。\n开发者头条是我安利过很多人的网站。因为说实话，做的真的很好。如果我觉得不好我就会换个网站开发插件了..在这里很多人会投稿一些些的好的文章。可以看到各个方面的知识。而且大部分的文章质量都很高（我已经从csdn迁移到开发者头条了）。慎哥也因为自己的投稿让自己的博客收获了很多的访问量，这对于开发者坚持写博客是一个很好的鼓励。所以，很感谢这么一个网站让我学到了很多东西。也让我扩充对整个计算机行业方面的认识不仅限于appweb还有后台了。\n无论如何要感谢开发者头条的创始人戚祥，当我在微信联系他和他说的时候，他觉得想法很好，然后让他们公司的工程师蒋春成联系了我。感到非常巧合而又幸运的是，他是我11级的学长。遇到了校友真的很亲切，和学长聊了好久啊，而且都是计算机人。蒋春成给了我很多帮助。不仅给了我很多意见，还给了我很多开发需要的素材。\n当然，还要感谢工作室的小伙伴，两台Mac电脑总是被我强行装上测试\u0026hellip;特别感谢的还有慎哥，慎哥头一回那么支持工作，不仅装上了，还提了很多意见，大写的感谢。dkk同学甚至提了issue\u0026hellip;也是厉害。\n最后，当然是感谢iOS开发大社区，摸着良心说，我写不出来Alamofire和Fuzi这种库。我只能凑合凑合尽我最大努力看源码和用去学习。没有这些为社区做贡献的大神们，也就没有很多个应用。\n起因 有开发Mac端插件的想法有两个原因，一是因为为了带小学弟，学起了Swift。二是因为看到了Tailor这个Mac端的插件。当我看到Tailor的时候我第一个想法是，卧槽，swift改变世界，第二个想法是，看上去Mac端开发也不难，估计api都差不多\u0026hellip;尝试一下吧\u0026hellip;\n然后那几天就在想图拉鼎大神的Mac软件怎么做的。。正好那几天看OpenWrt需要php，php可以调shell和系统接口。想了想，啊，Mac软件开发嘛，就是调applescript和写iOS嘛，来试试吧～\n然后我就入坑了..在这大概分享一下整个的完成过程。\n总结一句话，看源码。这学期虽然没有看什么大项目的..倒是完整的工程看了不少。我一次列在下面好了。\nTailor OS X Tutorial: Menus and Popovers in Menu Bar Apps Getting Started With OS X and Swift Tutorial: Part 1/3 producthunt-osx Fuzi 第一个就是有这个想法的来源。第二个第三个是ray上的教材，我没仔细看，直接把demo下下来的。第四个是那几天正好看到producthunt做了一个类似的，直接就下载了。Fuzi是用来解析xml的。大改就是这些东西。\n遇到的坑 遇到的第一个坑，是tableview不识别identifier\u0026hellip;后来不知道咋的自己就好了。。这个坑后来想了想，可能是改名字之后需要重新设置一下\u0026hellip;想不到其他的了。感觉就是把所有的重新设置一下自己就好了。\n第二个坑就是xml解析了。我依次尝试了Fuzi（Tailor里使用的），Kanna（这个是Yep里用到的），AEXML（这个是swiftgg在一片文章提到的），最近有看到雅虎的一个SwiftyXMLParser（这个也是swiftgg提到的），还没试验..但是看上去挺好的。\n我的思路在一开始错了，几乎所有的解析xml都是可以用xpath来解析的，但是吧，我这个人偷懒，不想去学xpath，这就导致了我一路想用css来解析，后来发现坑了。于是开始转换思路写xpath，对着Tailor的解析写，很快也就搞定了。xpath是一个很好的东西，真的值得去了解和学习一下。\n第三个坑，其实也不算坑，但是确实是个问题，就是Mac和iOS的迁移问题。正好，就那么巧\u0026hellip;虾神前几天发了一篇UXKit的公众号文章，非常值得看下。对于我这种小项目，我觉得完全可以采用UXKit的方式。虾神在里面说的比我好太多了..毕竟不是一个水平。\n不过说实话，我没想到Mac和iOS的api会差那么多。后面还是值得学习一下的。\n最后就是，我在整个项目当中，是没有用到applescript的，但是这是Mac开发很重要的东西，后面也会想办法去尝试一下applescript。这是我很遗憾的一点。\n彩蛋。\n在看Tailor的代码的时候看到了函数式编程的东西..这也算是swift语言很重要的一点，我在上一篇的博客的时候介绍了部分haskell的东西。最近有在继续haskell的学习，所以顺便提一下。\n在网络层，Tailor作者用了map函数，还用了flatmap，很好的对数据进行了分组解析再合并。这一块的代码我实在是觉得太nice了，就抄了。当然整个开发过程中很多代码都是抄的\u0026hellip;\n最后 我总和工作室的人说。要回馈这个社区，要懂得感恩。这一次我好像做了那么一点努力。这大概就是之前工作室死了的那个项目小初的初衷不忘初心吧。\n之前因为做外包，也不会很认真的去看一些很牛逼的库，就是一味的实现功能。不会去像现在这样去做点自己觉得好玩的东西，去尝试一些没尝试过的东西。至少这次做了一个东西，自己会去用。之前的外包项目，我手机里都没安装。\n而且就像蒋春成和我说的那样，这次，真的很有成就感。虽然这个代码的难度不高，实现的功能不复杂，但是做的很开心啊，也愿意去做。\n即使没有外包没有钱，一种纯“情怀”的状态。\n所谓穷开心，大概就是这么一种状态。\n祝开发者头条越来越好，我这个重度投稿者也会继续投稿我觉得质量上乘的文章的~","title":"开发者头条插件小记"},{"content":" 前几天就写好了一直没发。\n这是一篇很水的博客。仅写给自己。\n还有几天，我这总结的博客拖了又拖到现在才开始写。\n不废话开始总结 大三上 这学期写了9篇博客。iOS方面3篇，感想2篇，杂七杂八的倒腾2篇。\n看了3本还是4本书\u0026hellip;我来想想，看了知乎的选集，创业时我们在聊什么，于丹的最美古诗词，黑客与画家，翻了大秦帝国的某半本，围城半本。好像还一本，记不得了，这点很不错。\n出去玩了2次。感谢姜导和姜嫂。也感谢瑶姐。让我索然无味的写代码生活多了一点其他的颜色。\n这学期出去吃了N多次，不过也算是平常辛苦的犒劳吧。\n日记写了一学期的，这点也很满意。\n这学期买正版软件买了大好几百的样子。现在开始逐渐的支持正版，即使是office这种，我都淘宝买账号，又不贵，还省去了破解的麻烦。\n工作室项目做了一个，那个坑一样的项目。不过基本上算是摆脱外包生活了。可以没有钱，但不能让外包影响心情。\n自己还做了一个，正在上线过程中。敬请期待。不过不出意外的话，下学期要上线了。\n依旧坚持了锻炼，除了中间有段时间脖子疼，其他时间基本每天都有锻炼，初期是平板支撑加俯卧撑，后面加了打球，到最后面是跑步，最近都有在跑，欢迎各位后面约跑。总之一直都在锻炼，瘦了10斤，但是确实感觉到胳膊和肚子上逐渐都有了肌肉的痕迹。\n期末的时候换了手机，为了省钱只换了5s。\n学习上，学校那些专业课开的，我简直了。很多东西都过时了！！什么年代了还用这个那个的软件。行不行啊？汇编软工计网编程好评，其他都差评。\n这学期觉得听的最爽的课是毛概。我很认真的。\n这学期，申请入党了。考试也过了，到现在不通知我。党是不是不愿意吸收我。\n技术上，总算是摆脱了瓶颈期。看了yy大神的采访稿才知道后面应该怎么做，技术人，还是要多看源码。\n当然，技术上还学了很多其他的东西，这点我还是挺满意的，比如倒腾各种东西的时间越来越快。也开始逐渐接触一些更高端的东西。\n最近也在开始逐渐的了解整个互联网的生态环境，更加全方位的发展。主要是体验产品和对产品的理解上，都在刻意的带着训练自己。\n依旧是抄了一学期的作业。不过已经进步了，有些能自己写的都自己写了，不想写的都抄了，大部分都不想写。我没写作业的时间都用来写代码了。很多课也开始逐渐的变得自己靠自己，而不是靠别人。这是我很感到进步的一点。\n这学期最大的事情算是接手工作室吧。但这是后话。\n重修刷分，是这学期最失败的一件事情。不过也是好事，我算是彻底打消了出国的想法。后面可以安心的准备考研或者工作。\n这学期除了自己变懒了，很多计划还是没有做成，看了太多直播。而且确实，有些专业课还是要看一看的。晚睡拖延症越发严重。这是不好的。\n感觉这学期其实特要感谢以及表扬一个人，慎哥。比较努力，跟我学iOS也很辛苦，干了很多搬砖的事情，但是确实很认真。也没事指导我穿衣打扮，在此，特意感谢以及表扬。\n其他人，感谢起来就太多了。不一一说了。你们都知道我是爱你们的。\n这学期用我挺哥的话说，除了XX，都完美了，那两个字请自行脑补。我实在是不堪回首。要好好学习了啊。\n哦，对了，很严肃的话题。这学期依旧单身。即使觉得有姑娘不错。但是依旧单身。\n自从回168韦老师和我说，不要着急，不能凑合，不能放低标准。我现在很淡定，以后我们就是高级工程师，公司CTO。姑娘们看着办。\n这学期也想明白很多事情，比如钱和情怀。还有没想明白的，依旧纠结的考研和工作。\n打个分，75吧，原计划，85的，真的。要不是是吧，就85了。\n2016年终总结 博客写了26篇。\n单身。\n技术上越发成熟。\n又一年了。\n其实这一年没啥好总结的。学习就那样，技术上也就那样。\n真的发自内心的感谢信安一班。你们又陪我度过了一年。这一年，和我在一起时间最长的就是你们。打球也好上课也好写代码也好。总有很多欢乐。\n不能提名字，提名字就写不完了。各种感谢！深鞠躬！爱你们！\n","permalink":"http://localhost:1313/posts/college-life-2016/","summary":"前几天就写好了一直没发。\n这是一篇很水的博客。仅写给自己。\n还有几天，我这总结的博客拖了又拖到现在才开始写。\n不废话开始总结 大三上 这学期写了9篇博客。iOS方面3篇，感想2篇，杂七杂八的倒腾2篇。\n看了3本还是4本书\u0026hellip;我来想想，看了知乎的选集，创业时我们在聊什么，于丹的最美古诗词，黑客与画家，翻了大秦帝国的某半本，围城半本。好像还一本，记不得了，这点很不错。\n出去玩了2次。感谢姜导和姜嫂。也感谢瑶姐。让我索然无味的写代码生活多了一点其他的颜色。\n这学期出去吃了N多次，不过也算是平常辛苦的犒劳吧。\n日记写了一学期的，这点也很满意。\n这学期买正版软件买了大好几百的样子。现在开始逐渐的支持正版，即使是office这种，我都淘宝买账号，又不贵，还省去了破解的麻烦。\n工作室项目做了一个，那个坑一样的项目。不过基本上算是摆脱外包生活了。可以没有钱，但不能让外包影响心情。\n自己还做了一个，正在上线过程中。敬请期待。不过不出意外的话，下学期要上线了。\n依旧坚持了锻炼，除了中间有段时间脖子疼，其他时间基本每天都有锻炼，初期是平板支撑加俯卧撑，后面加了打球，到最后面是跑步，最近都有在跑，欢迎各位后面约跑。总之一直都在锻炼，瘦了10斤，但是确实感觉到胳膊和肚子上逐渐都有了肌肉的痕迹。\n期末的时候换了手机，为了省钱只换了5s。\n学习上，学校那些专业课开的，我简直了。很多东西都过时了！！什么年代了还用这个那个的软件。行不行啊？汇编软工计网编程好评，其他都差评。\n这学期觉得听的最爽的课是毛概。我很认真的。\n这学期，申请入党了。考试也过了，到现在不通知我。党是不是不愿意吸收我。\n技术上，总算是摆脱了瓶颈期。看了yy大神的采访稿才知道后面应该怎么做，技术人，还是要多看源码。\n当然，技术上还学了很多其他的东西，这点我还是挺满意的，比如倒腾各种东西的时间越来越快。也开始逐渐接触一些更高端的东西。\n最近也在开始逐渐的了解整个互联网的生态环境，更加全方位的发展。主要是体验产品和对产品的理解上，都在刻意的带着训练自己。\n依旧是抄了一学期的作业。不过已经进步了，有些能自己写的都自己写了，不想写的都抄了，大部分都不想写。我没写作业的时间都用来写代码了。很多课也开始逐渐的变得自己靠自己，而不是靠别人。这是我很感到进步的一点。\n这学期最大的事情算是接手工作室吧。但这是后话。\n重修刷分，是这学期最失败的一件事情。不过也是好事，我算是彻底打消了出国的想法。后面可以安心的准备考研或者工作。\n这学期除了自己变懒了，很多计划还是没有做成，看了太多直播。而且确实，有些专业课还是要看一看的。晚睡拖延症越发严重。这是不好的。\n感觉这学期其实特要感谢以及表扬一个人，慎哥。比较努力，跟我学iOS也很辛苦，干了很多搬砖的事情，但是确实很认真。也没事指导我穿衣打扮，在此，特意感谢以及表扬。\n其他人，感谢起来就太多了。不一一说了。你们都知道我是爱你们的。\n这学期用我挺哥的话说，除了XX，都完美了，那两个字请自行脑补。我实在是不堪回首。要好好学习了啊。\n哦，对了，很严肃的话题。这学期依旧单身。即使觉得有姑娘不错。但是依旧单身。\n自从回168韦老师和我说，不要着急，不能凑合，不能放低标准。我现在很淡定，以后我们就是高级工程师，公司CTO。姑娘们看着办。\n这学期也想明白很多事情，比如钱和情怀。还有没想明白的，依旧纠结的考研和工作。\n打个分，75吧，原计划，85的，真的。要不是是吧，就85了。\n2016年终总结 博客写了26篇。\n单身。\n技术上越发成熟。\n又一年了。\n其实这一年没啥好总结的。学习就那样，技术上也就那样。\n真的发自内心的感谢信安一班。你们又陪我度过了一年。这一年，和我在一起时间最长的就是你们。打球也好上课也好写代码也好。总有很多欢乐。\n不能提名字，提名字就写不完了。各种感谢！深鞠躬！爱你们！","title":"大三上+我的2016年总结"},{"content":"慎哥开博客了，博客做的很好看！欢迎访问~cbsfly 请合理利用互联网，不要对国家安全造成任何威胁！\n因为要做比赛所以倒腾了OpenWrt倒腾了不到一天，做个小的记录。\n前天上网买的路由器昨天就到货了，淘宝，33，硬改了的。16M闪存64内存好像。\n昨天和店家交流了一下，店家人真的不错。然后我就开始把店家装好的操作系统重装，这次买的路由器是可以刷官方原版的，我就下载了一个最新版的chaos_calmer。\n什么是OpenWrt，简单的说，就是在你的路由器里面装个Linux操作系统。装上Linux的操作系统，是吧，你们懂得。基本上啥都能干了。\n如果你家用的是极路由或者是小米路由，你要清楚，那都是深度定制的OpenWrt\u0026hellip;\n我倒腾了如下几个东西。一，中继。二，jump gfw。三，8021x校园网拨号。具体如下。\n预备 首先你得有个硬件能刷操作系统的路由器。我建议某宝买硬改的，很便宜。 在ubuntu中，操作系统更新和安装软件用的是apt-get，在OpenWrt里用的是opkg(我觉得是OpenWrt Package的缩写) 第二步可以联网进行操作，也可以本地安装。当然我一直觉得联网的好，不用编译配置啥的了\u0026hellip; 刚刷完操作系统的时候路由器的无线网默认是关闭的，需要登录打开。 因为是操作系统，所以我们可以通过ssh root@192.168.1.1来对操作系统进行操作。 刷完路由器的那个web界面叫luci。下文会用到。 没找到中文语言包，所以下文全是英文。 中继 OpenWrt可以作为无线中继。在此感谢班长和姜导提供该技能包。\n所谓无线中继，就是你用OpweWrt连接无线网，然后再把这个无线网的信号扩展了。这样就解决了一个路由器信号不够强的问题。其次，前文说道，OpenWrt是个Linux的操作系统，我们安装软件需要让路由器联网。\n让路由器联网有两种方式，一种直接插网线到lan口。事实证明这样我就找不到路由器的ip了\u0026hellip;\n在咨询了班长之后我选择了无线中继的方式。\n这有篇百度文库的教程写得很详细了我就不对步骤进行赘述了（百度文库还能有这种好材料\u0026hellip;）因为我刷的是最新的cc版本路由器，所以界面不太一样，但是没啥差别。我只强调一个问题。\n在第一步里，一定要设置lan口的ip，不能在同一个网段。我设置成192.168.10.1，设置完成之后，OpenWrt路由器会通过上级路由器获得一个ip，通过OpenWrt这个路由连接的设备，ssh的ip地址变成192.168.10.1，web访问也变成192.168.10.1。\n全部设置完就可以通过OpenWrt路由器上网了，此时ssh到OpenWrt，发现已经可以ping了。\njump gfw 前几天发朋友圈问了个敏感问题，没想到那么多人回复\u0026hellip;\n我现在是要入党的人，但是我又是程序员，有时候确实不得不那什么。\n所以在此也说一下，你们有需求可以私聊我，我很乐意帮忙，具体手机和电脑怎么做我就不写了。路由器也是因为要做比赛才倒腾的。\n我用的是shadowsocks的方式，也可以用vpn，我们工作室的极路由提供了vpn的接口，表示vpn太难搭建。\nopenwrt-shadowsocksGithub地址。\n首先下载预编译的ipk到本地安装。在shadowsocks-libev找到对应的机型。我的是ar71xx，然后找到那个下载次数最多的shadowsocks-libev-spec版本。这个是针对OpenWrt的优化版本。\n下载完毕之后，通过scp命令上传到OpenWrt上，先opkg update，这一步是更新源，和我们ubuntu的update一样。\n接着\nopkg install shadowsocks-libev-spec_2.4.3-1_ar71xx.ipk\n安装，他会自动的把需要的依赖包一并下载了。到这就完成了对ss的安装。\n在shadowsocks-libev-spec从v1.5.2开始可以使用luci配置界面。所以我就找了一下luci的package，所有的package都在packages列表。luci-app-shadowsocks-spec_1.3.7-1_all.ipk我的叫这个，我就下载了然后继续scp上传，然后\nopkg install luci-app-shadowsocks-spec_1.3.7-1_all.ipk\n之后登陆web界面，这时候就有可视化的配置界面了。\n输入你的ss账号密码就可以了。但是需要在最下面添加ignore list，让国内的网站直接连接网络，不然的话像我，就没法看nba直播了，很多视频优酷什么的也不能看了\u0026hellip;\n这一步其实是关键的，新建一个后缀为list的文件，然后输入这串命令\nwget -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | awk -F\\| '/CN\\|ipv4/ { printf(\u0026quot;%s/%d\\n\u0026quot;, $4, 32-log($5)/log(2)) }' \u0026gt; /dev/ignore.list\n然后把ignore的路径设置到你配置的那个文件就可以了。\n这时候在开腾讯nba就能看直播了\u0026hellip;我简直，为了看球什么都干得出来。然后再连接路由器就可以Jump gfw了~\n8021x校园网拨号 不过我们不用更换源，首先我们需要\nopkg remove wpad-mini\n然后opkg install wpad和opkg install wpa-cli。\n然后配置8021x的文件就可以上网了。\n因为我走了中继，所以这个没有具体实践到拨号，只实践到安装依赖包。\n具体参考迪哥的博客极路由root并8021x校园网拨号经验分享\n结尾 请合理利用互联网，不要对国家安全造成任何威胁！\n参考链接 Openwrt无线中继教程 极路由root并8021x校园网拨号经验分享 openwrt-shadowsocks OpenWRT之Shadowsocks更新ignore.list ","permalink":"http://localhost:1313/posts/openwrt-notes/","summary":"慎哥开博客了，博客做的很好看！欢迎访问~cbsfly 请合理利用互联网，不要对国家安全造成任何威胁！\n因为要做比赛所以倒腾了OpenWrt倒腾了不到一天，做个小的记录。\n前天上网买的路由器昨天就到货了，淘宝，33，硬改了的。16M闪存64内存好像。\n昨天和店家交流了一下，店家人真的不错。然后我就开始把店家装好的操作系统重装，这次买的路由器是可以刷官方原版的，我就下载了一个最新版的chaos_calmer。\n什么是OpenWrt，简单的说，就是在你的路由器里面装个Linux操作系统。装上Linux的操作系统，是吧，你们懂得。基本上啥都能干了。\n如果你家用的是极路由或者是小米路由，你要清楚，那都是深度定制的OpenWrt\u0026hellip;\n我倒腾了如下几个东西。一，中继。二，jump gfw。三，8021x校园网拨号。具体如下。\n预备 首先你得有个硬件能刷操作系统的路由器。我建议某宝买硬改的，很便宜。 在ubuntu中，操作系统更新和安装软件用的是apt-get，在OpenWrt里用的是opkg(我觉得是OpenWrt Package的缩写) 第二步可以联网进行操作，也可以本地安装。当然我一直觉得联网的好，不用编译配置啥的了\u0026hellip; 刚刷完操作系统的时候路由器的无线网默认是关闭的，需要登录打开。 因为是操作系统，所以我们可以通过ssh root@192.168.1.1来对操作系统进行操作。 刷完路由器的那个web界面叫luci。下文会用到。 没找到中文语言包，所以下文全是英文。 中继 OpenWrt可以作为无线中继。在此感谢班长和姜导提供该技能包。\n所谓无线中继，就是你用OpweWrt连接无线网，然后再把这个无线网的信号扩展了。这样就解决了一个路由器信号不够强的问题。其次，前文说道，OpenWrt是个Linux的操作系统，我们安装软件需要让路由器联网。\n让路由器联网有两种方式，一种直接插网线到lan口。事实证明这样我就找不到路由器的ip了\u0026hellip;\n在咨询了班长之后我选择了无线中继的方式。\n这有篇百度文库的教程写得很详细了我就不对步骤进行赘述了（百度文库还能有这种好材料\u0026hellip;）因为我刷的是最新的cc版本路由器，所以界面不太一样，但是没啥差别。我只强调一个问题。\n在第一步里，一定要设置lan口的ip，不能在同一个网段。我设置成192.168.10.1，设置完成之后，OpenWrt路由器会通过上级路由器获得一个ip，通过OpenWrt这个路由连接的设备，ssh的ip地址变成192.168.10.1，web访问也变成192.168.10.1。\n全部设置完就可以通过OpenWrt路由器上网了，此时ssh到OpenWrt，发现已经可以ping了。\njump gfw 前几天发朋友圈问了个敏感问题，没想到那么多人回复\u0026hellip;\n我现在是要入党的人，但是我又是程序员，有时候确实不得不那什么。\n所以在此也说一下，你们有需求可以私聊我，我很乐意帮忙，具体手机和电脑怎么做我就不写了。路由器也是因为要做比赛才倒腾的。\n我用的是shadowsocks的方式，也可以用vpn，我们工作室的极路由提供了vpn的接口，表示vpn太难搭建。\nopenwrt-shadowsocksGithub地址。\n首先下载预编译的ipk到本地安装。在shadowsocks-libev找到对应的机型。我的是ar71xx，然后找到那个下载次数最多的shadowsocks-libev-spec版本。这个是针对OpenWrt的优化版本。\n下载完毕之后，通过scp命令上传到OpenWrt上，先opkg update，这一步是更新源，和我们ubuntu的update一样。\n接着\nopkg install shadowsocks-libev-spec_2.4.3-1_ar71xx.ipk\n安装，他会自动的把需要的依赖包一并下载了。到这就完成了对ss的安装。\n在shadowsocks-libev-spec从v1.5.2开始可以使用luci配置界面。所以我就找了一下luci的package，所有的package都在packages列表。luci-app-shadowsocks-spec_1.3.7-1_all.ipk我的叫这个，我就下载了然后继续scp上传，然后\nopkg install luci-app-shadowsocks-spec_1.3.7-1_all.ipk\n之后登陆web界面，这时候就有可视化的配置界面了。\n输入你的ss账号密码就可以了。但是需要在最下面添加ignore list，让国内的网站直接连接网络，不然的话像我，就没法看nba直播了，很多视频优酷什么的也不能看了\u0026hellip;\n这一步其实是关键的，新建一个后缀为list的文件，然后输入这串命令\nwget -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | awk -F\\| '/CN\\|ipv4/ { printf(\u0026quot;%s/%d\\n\u0026quot;, $4, 32-log($5)/log(2)) }' \u0026gt; /dev/ignore.list\n然后把ignore的路径设置到你配置的那个文件就可以了。\n这时候在开腾讯nba就能看直播了\u0026hellip;我简直，为了看球什么都干得出来。然后再连接路由器就可以Jump gfw了~\n8021x校园网拨号 不过我们不用更换源，首先我们需要\nopkg remove wpad-mini","title":"OpenWrt小记"},{"content":" 后面尽量每周都写点东西，这是对自己的要求，也是2016年我想坚持做的一件事情。作为一个要从纯技术人员逐渐转型的人，写作，是记录，也是必需品。\n念书，真的很幸福。\n刚刚和一帆说，你觉不觉得过去的一星期特别累，各种事情。一帆和我说，所以说啊，学习才是最轻松的。\n是啊，这已经不是我第一次觉得，学习轻松。\n从大二加入工作室开始，没课的时候我基本上都会来工作室写代码。因为我们有企业的项目，项目的进度要求非常高，这就意味着你的工作量在增加，需要在有限的时间完成大量的东西，是很难的。\n去年的这个时候，我们做了一个医疗方面的项目，我负责iOS版本医生端全部的开发。因为开发能力加上本身任务量就大，我每天大搞从早上九点就开始开发，中午大概休息两个多小时，然后到晚上九点。这种工作强度，不止一次让我吐血。\n过去的一周，我和一帆接手了工作室。出去玩的疲惫还没缓过来劲又开始各种事情，除了安排没有安排的事情之外，我们还对后面的发展和要做的东西进行了一个计划，整理工作室的很多事情。我们还进行了初期的招新。\n对我个人来说，我得保持自己在一个学习的状态，技术上还需要很多的积累，不仅是对于新技术的学习还是对于已掌握技术的扩展。我还带着肾哥在学习。还和班长姜导去了一趟沙河找老师做比赛。\n过去的一周，我强迫性的让自己早起来面对每天的挑战。平均每天大概在八点多一点点就开始了新的一天。晚上坚持跑步，让自己保持一个好的状态。\n记得玩的时候就说，忙点好，好是好。但是，很累。\n回头来说学习。\n我们总觉得学习很辛苦，学习是很辛苦。但是比起工作强度来说，不那么辛苦，学习的量是一定的，但是我相信没有那么费神。大部分的人选择在最后两星期来准备考试。那么平日里只要计划好，就可以在期末的时候很好的去应对。\n学习的东西是死的，计划和项目是活的。\n因为你不知道未来会发生什么，所以你总在害怕去面对。\n过去的一星期里，我把我的大部分精力都放在了工作室上，每天晚上会考虑后面的发展，会考虑还有哪些事情没做。如果过去的一周是考试周，我只需要计划我的复习就可以了。这个其实不是很难。\n大学的学习，充满着不确定性和时间。所以剩下的时间该怎么做，是需要去规划的。正是这种不确定性，决定了你是否会累与不累。\n读书的时候，除了学习之外，你有大量的时间去做除了学习之外的事情。你可以出去玩，可以选择去写代码，当然你也可以选择去堕落。\n这都没什么。\n我总在强调好好学习，好好学习是因为未来的选择会更多。技术又好，成绩又好能保研，那么未来都是光明的。\n好好学习，不挂科，可以让你有足够的精力去面对前面的困难，而不是挂科来影响你的心情。这大概就是好好学习的意义吧。\n我总在说好好学习，最后我连自己都做不到。\n所以呢？为什么念书好幸福？\n因为你可以追求你所想的，一旦工作，你没了金钱的来源，你有了生活的压力，你所追求的，就不能是纯粹的情怀了。\n","permalink":"http://localhost:1313/posts/study-is-happiness/","summary":"后面尽量每周都写点东西，这是对自己的要求，也是2016年我想坚持做的一件事情。作为一个要从纯技术人员逐渐转型的人，写作，是记录，也是必需品。\n念书，真的很幸福。\n刚刚和一帆说，你觉不觉得过去的一星期特别累，各种事情。一帆和我说，所以说啊，学习才是最轻松的。\n是啊，这已经不是我第一次觉得，学习轻松。\n从大二加入工作室开始，没课的时候我基本上都会来工作室写代码。因为我们有企业的项目，项目的进度要求非常高，这就意味着你的工作量在增加，需要在有限的时间完成大量的东西，是很难的。\n去年的这个时候，我们做了一个医疗方面的项目，我负责iOS版本医生端全部的开发。因为开发能力加上本身任务量就大，我每天大搞从早上九点就开始开发，中午大概休息两个多小时，然后到晚上九点。这种工作强度，不止一次让我吐血。\n过去的一周，我和一帆接手了工作室。出去玩的疲惫还没缓过来劲又开始各种事情，除了安排没有安排的事情之外，我们还对后面的发展和要做的东西进行了一个计划，整理工作室的很多事情。我们还进行了初期的招新。\n对我个人来说，我得保持自己在一个学习的状态，技术上还需要很多的积累，不仅是对于新技术的学习还是对于已掌握技术的扩展。我还带着肾哥在学习。还和班长姜导去了一趟沙河找老师做比赛。\n过去的一周，我强迫性的让自己早起来面对每天的挑战。平均每天大概在八点多一点点就开始了新的一天。晚上坚持跑步，让自己保持一个好的状态。\n记得玩的时候就说，忙点好，好是好。但是，很累。\n回头来说学习。\n我们总觉得学习很辛苦，学习是很辛苦。但是比起工作强度来说，不那么辛苦，学习的量是一定的，但是我相信没有那么费神。大部分的人选择在最后两星期来准备考试。那么平日里只要计划好，就可以在期末的时候很好的去应对。\n学习的东西是死的，计划和项目是活的。\n因为你不知道未来会发生什么，所以你总在害怕去面对。\n过去的一星期里，我把我的大部分精力都放在了工作室上，每天晚上会考虑后面的发展，会考虑还有哪些事情没做。如果过去的一周是考试周，我只需要计划我的复习就可以了。这个其实不是很难。\n大学的学习，充满着不确定性和时间。所以剩下的时间该怎么做，是需要去规划的。正是这种不确定性，决定了你是否会累与不累。\n读书的时候，除了学习之外，你有大量的时间去做除了学习之外的事情。你可以出去玩，可以选择去写代码，当然你也可以选择去堕落。\n这都没什么。\n我总在强调好好学习，好好学习是因为未来的选择会更多。技术又好，成绩又好能保研，那么未来都是光明的。\n好好学习，不挂科，可以让你有足够的精力去面对前面的困难，而不是挂科来影响你的心情。这大概就是好好学习的意义吧。\n我总在说好好学习，最后我连自己都做不到。\n所以呢？为什么念书好幸福？\n因为你可以追求你所想的，一旦工作，你没了金钱的来源，你有了生活的压力，你所追求的，就不能是纯粹的情怀了。","title":"念书真的很幸福"},{"content":"上周日更新了新版的Mac OS 10.11 EI Captain，上午在工作室升级Xcode7还有keynote等等，下午安装操作系统和各种倒腾。最后发现时间都浪费在下午软件不能正常安装上了。特此写篇博客记录一下整个填更新的填坑过程。\n其实我是很反对更新的，一更新就得踩坑，但是强迫症患者没法看到有更新不去更。\n下面开始正文。\n1. homebrew不能使用 homebrew本身是需要Xcode的command line的，而新版的Xcode7，应该是会把之前的command line删除了..所以即使你用sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer但是你还是没有办法使用homebrew，你在使用homebrew的时候，不论什么命令，都是Failure while executing: /usr/bin/otool -L /usr/bin/install_name_tool\n当然，有sudo xcodebuild -license的原因，就是你没有同意xcodebuild的license。当然这些我都试了。还是不行，后来查查发现是command line没有选中的原因。\n解决方法：首先xcode-select -p一般默认是sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer 但是Xcode7你需要切换到/Library/Developer/CommandLineTools，这时候就好了。\n很多人的homebrew不能用是因为权限问题，在使用homebrew doctor的时候会提醒你。这点就不说了。\n2. Xtrafinder不能使用 Xtrafinder更新完之后会提醒你怎么做，这就是苹果的rootless机制导致的，开开就OK了。\n我想说的就是Xtrafinder会挡住finder一部分，前天好像已经出了更新，但是源没有换，所以还是0.25.6版本。V2ex上有人问了，大家都一样，不是电脑的问题所以不要着急。\n3. gem更新 gem安装的东西，反正我的是都没了\u0026hellip;因为苹果把/usr (except /usr/local)里的东西都再见了。需要把gem的默认安装路径重新设置一下。 所以我的rails还有博客的jekyll，当然，还有我的cocoapods都挂了。需要重新安装。\n网上好多方法，说自定义GEM_HOME等等。我觉得都不太好，在stackoverflow上看到一个方法很好，分享一下。\n打开terminal修改~/.gemrc\n增加gem: -n/usr/local/bin这样就把gem的默认安装环境换到了/usr/local/bin下，这样更新gem就没问题了。\n4.Xcode的Alcatraz不在window下显示 也就自己的Mac作大死解决这个问题。\n网上有很多在github提issue，我看了很多，对着做了很多。里面说的都很详细，在此不贴，最后面有链接。\n基本上原因就是，你的Alcatraz没有加入Xcode的UUID。\n这里说明一下，每个Xcode版本的UUID不一样，所以最好的方法是先获取Xcode的UUID。\n命令是defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID\n最后加到一个plist文件然后重启Xcode就可以了，大部分都是这样解决了。\n当然，我用这个方法没有解决。万念俱灰下，重新用了百度..想看看国内人怎么解决的，记不得在cocoachina还是csdn看到一个人说，那些方法我都没有，我把Alcatraz下载下来运行了一下就ok了\u0026hellip;\n于是乎，我上github上下载了Alcatraz，运行了一下。。我也ok了。。\n基本上遇到的大坑就这几个，踩完也没啥了。\n但是我app store更新完新版本的Xcode7之后再安装Xcode6，app store就会更新我的Xcode6..而且我的homebrew也是只能识别我的Xcode6了\u0026hellip;我一直无法解决。还有我的XQuartz一直显示过期也没法解决。简直，强迫症。\n最后唠两句。\n最近为啥没更新博客，我会说我同时写了几份代码么\u0026hellip;完全没有时间。。 最近的心凉的很透彻。晚上看着微信洗脸。唉，说好了四星期之后做点其他事情，这都五星期了，还在写代码。在意的东西太多，不放弃一些永远只能这样。\n还有，暂时是决定考研了。\n有些事情，唉，就这了，没戏的事情总在想也没啥意义..还是忙一忙充实充实就不想了。\n参考链接 1.关于 OSX 升级到 EI Captain 的解决方案\n2.Failure while executing: /usr/bin/otool -L /usr/bin/install_name_tool\n3.xcode-select active developer directory error on OSX Mavericks\n4.Can\u0026rsquo;t install gems on MacOS X “El Capitan”\n","permalink":"http://localhost:1313/posts/mac-eicaptain-upgrade-problem/","summary":"上周日更新了新版的Mac OS 10.11 EI Captain，上午在工作室升级Xcode7还有keynote等等，下午安装操作系统和各种倒腾。最后发现时间都浪费在下午软件不能正常安装上了。特此写篇博客记录一下整个填更新的填坑过程。\n其实我是很反对更新的，一更新就得踩坑，但是强迫症患者没法看到有更新不去更。\n下面开始正文。\n1. homebrew不能使用 homebrew本身是需要Xcode的command line的，而新版的Xcode7，应该是会把之前的command line删除了..所以即使你用sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer但是你还是没有办法使用homebrew，你在使用homebrew的时候，不论什么命令，都是Failure while executing: /usr/bin/otool -L /usr/bin/install_name_tool\n当然，有sudo xcodebuild -license的原因，就是你没有同意xcodebuild的license。当然这些我都试了。还是不行，后来查查发现是command line没有选中的原因。\n解决方法：首先xcode-select -p一般默认是sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer 但是Xcode7你需要切换到/Library/Developer/CommandLineTools，这时候就好了。\n很多人的homebrew不能用是因为权限问题，在使用homebrew doctor的时候会提醒你。这点就不说了。\n2. Xtrafinder不能使用 Xtrafinder更新完之后会提醒你怎么做，这就是苹果的rootless机制导致的，开开就OK了。\n我想说的就是Xtrafinder会挡住finder一部分，前天好像已经出了更新，但是源没有换，所以还是0.25.6版本。V2ex上有人问了，大家都一样，不是电脑的问题所以不要着急。\n3. gem更新 gem安装的东西，反正我的是都没了\u0026hellip;因为苹果把/usr (except /usr/local)里的东西都再见了。需要把gem的默认安装路径重新设置一下。 所以我的rails还有博客的jekyll，当然，还有我的cocoapods都挂了。需要重新安装。\n网上好多方法，说自定义GEM_HOME等等。我觉得都不太好，在stackoverflow上看到一个方法很好，分享一下。\n打开terminal修改~/.gemrc\n增加gem: -n/usr/local/bin这样就把gem的默认安装环境换到了/usr/local/bin下，这样更新gem就没问题了。\n4.Xcode的Alcatraz不在window下显示 也就自己的Mac作大死解决这个问题。\n网上有很多在github提issue，我看了很多，对着做了很多。里面说的都很详细，在此不贴，最后面有链接。\n基本上原因就是，你的Alcatraz没有加入Xcode的UUID。\n这里说明一下，每个Xcode版本的UUID不一样，所以最好的方法是先获取Xcode的UUID。\n命令是defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID\n最后加到一个plist文件然后重启Xcode就可以了，大部分都是这样解决了。\n当然，我用这个方法没有解决。万念俱灰下，重新用了百度..想看看国内人怎么解决的，记不得在cocoachina还是csdn看到一个人说，那些方法我都没有，我把Alcatraz下载下来运行了一下就ok了\u0026hellip;\n于是乎，我上github上下载了Alcatraz，运行了一下。。我也ok了。。\n基本上遇到的大坑就这几个，踩完也没啥了。\n但是我app store更新完新版本的Xcode7之后再安装Xcode6，app store就会更新我的Xcode6..而且我的homebrew也是只能识别我的Xcode6了\u0026hellip;我一直无法解决。还有我的XQuartz一直显示过期也没法解决。简直，强迫症。\n最后唠两句。\n最近为啥没更新博客，我会说我同时写了几份代码么\u0026hellip;完全没有时间。。 最近的心凉的很透彻。晚上看着微信洗脸。唉，说好了四星期之后做点其他事情，这都五星期了，还在写代码。在意的东西太多，不放弃一些永远只能这样。\n还有，暂时是决定考研了。\n有些事情，唉，就这了，没戏的事情总在想也没啥意义..还是忙一忙充实充实就不想了。\n参考链接 1.关于 OSX 升级到 EI Captain 的解决方案","title":"Mac升级10.11 EI Captain 填坑"},{"content":"9.4号中午去外面吃完冒菜回来都快三点了，这个点尴尬的不行。于是就去工作室倒腾点东西。也不想写代码，就开始各种在mac下装软件。项目基本上暂时没有什么要特别忙的，我也不能总写，都写了慎哥就没得写了。今晚上就把之前做的东西来个小记。\n想到的是破译wifi，当然最终因为各种因素没破译成功。不过中间过程还是很享受的。下面开始。\n百度了一下。有一篇MACOS苹果系统下破解无线网WPA,WPA2密码。用到的主要工具是Aircrack。于是就开始倒腾了。\n安装macport 首先第一步要安装macport。macport据我理解，相当于homebrew，ubuntu下相当于apt-get install。根据官网来说，安装macport最简单的方法就是下载pkg文件直接安装，但是我在下载pkg安装过程中，会出现卡死的问题。google了半天没找到解决方法。于是就下载了源代码安装，这在官网上都有说明。前面什么安装xcode的command line tools那是装机必备我就不多说了。\n下载之后在官网上有说明，解压之后进入目录，进行./configure \u0026amp;\u0026amp; make \u0026amp;\u0026amp; sudo make install 之后需要添加环境变量，我没看懂官网的说明，自行google了一下。看到很多人的博客都写过这个问题，我在此就摘录一下。\n需要将/opt/local/bin和/opt/local/sbin添加到$PATH搜索路径中。然后编辑/etc/profile，这里需要超级用户。如果用vim的话需要wq！在profile里加入下面两句\nexport PATH=/opt/local/bin:$PATH\nexport PATH=/opt/local/sbin:$PATH\n然后就可以了，如果要立即生效，那么需要利用source命令source /etc/profile\n这样就可以用了，执行sudo port -v selfupdate更新。到这步会发现好像仿佛是被墙了。。。\n安装proxychains 然后我又陷入了难题，好不容易手动编译安装成功了。结果更新好像被墙了咋办。查查查，命令行下使用代理的方法。找到一个东西，叫做proxychains。搜这个用了好久，因为我用的是ss，ss支持的时socks5，而iterm支持http，这就麻烦了。后来在v2ex上发现hzlzh问了这个问题。我就安装这个了。\n安装proxychains4非常简单，直接用homebrew就可以了。brew install proxychains-ng 安装完毕要设置代理\n修改/usr/local/etc/proxychains.conf 最下面 [ProxyList] socks5 127.0.0.1 1080 测试proxychain能不能用，proxychains4 curl twitter.com会显示ok。我就不截图了。\nproxychain可以让它后面的命令行直接走代理的路线，而不用直接进行网络请求。 我刚刚用这个加上home cask装了macdown。还是很不错的。因为很多命令行是需要进行网络请求的。\n之后就可以proxychains4 sudo port -v selfupdate了。可能有点慢，不过我这次可以正常了。\n安装aircrack-ng 最后的最后，我们可以用sudo port install aircrack-ng就可以安装aircrack了。\n好了，剩下的就是按照那个博客说的来破解了\u0026hellip;到这的时候我试了一下，但是班长突然打电话然我去取自行车，我就去了~后面的就没有后面了。\n后面的安排 最近项目差不多算是完成了，后面的计划可能要调整一下状态，把RAC再看看，想看看动画，然后，继续开发下一个项目了~\n","permalink":"http://localhost:1313/posts/mac-install-aircrackng/","summary":"9.4号中午去外面吃完冒菜回来都快三点了，这个点尴尬的不行。于是就去工作室倒腾点东西。也不想写代码，就开始各种在mac下装软件。项目基本上暂时没有什么要特别忙的，我也不能总写，都写了慎哥就没得写了。今晚上就把之前做的东西来个小记。\n想到的是破译wifi，当然最终因为各种因素没破译成功。不过中间过程还是很享受的。下面开始。\n百度了一下。有一篇MACOS苹果系统下破解无线网WPA,WPA2密码。用到的主要工具是Aircrack。于是就开始倒腾了。\n安装macport 首先第一步要安装macport。macport据我理解，相当于homebrew，ubuntu下相当于apt-get install。根据官网来说，安装macport最简单的方法就是下载pkg文件直接安装，但是我在下载pkg安装过程中，会出现卡死的问题。google了半天没找到解决方法。于是就下载了源代码安装，这在官网上都有说明。前面什么安装xcode的command line tools那是装机必备我就不多说了。\n下载之后在官网上有说明，解压之后进入目录，进行./configure \u0026amp;\u0026amp; make \u0026amp;\u0026amp; sudo make install 之后需要添加环境变量，我没看懂官网的说明，自行google了一下。看到很多人的博客都写过这个问题，我在此就摘录一下。\n需要将/opt/local/bin和/opt/local/sbin添加到$PATH搜索路径中。然后编辑/etc/profile，这里需要超级用户。如果用vim的话需要wq！在profile里加入下面两句\nexport PATH=/opt/local/bin:$PATH\nexport PATH=/opt/local/sbin:$PATH\n然后就可以了，如果要立即生效，那么需要利用source命令source /etc/profile\n这样就可以用了，执行sudo port -v selfupdate更新。到这步会发现好像仿佛是被墙了。。。\n安装proxychains 然后我又陷入了难题，好不容易手动编译安装成功了。结果更新好像被墙了咋办。查查查，命令行下使用代理的方法。找到一个东西，叫做proxychains。搜这个用了好久，因为我用的是ss，ss支持的时socks5，而iterm支持http，这就麻烦了。后来在v2ex上发现hzlzh问了这个问题。我就安装这个了。\n安装proxychains4非常简单，直接用homebrew就可以了。brew install proxychains-ng 安装完毕要设置代理\n修改/usr/local/etc/proxychains.conf 最下面 [ProxyList] socks5 127.0.0.1 1080 测试proxychain能不能用，proxychains4 curl twitter.com会显示ok。我就不截图了。\nproxychain可以让它后面的命令行直接走代理的路线，而不用直接进行网络请求。 我刚刚用这个加上home cask装了macdown。还是很不错的。因为很多命令行是需要进行网络请求的。\n之后就可以proxychains4 sudo port -v selfupdate了。可能有点慢，不过我这次可以正常了。\n安装aircrack-ng 最后的最后，我们可以用sudo port install aircrack-ng就可以安装aircrack了。\n好了，剩下的就是按照那个博客说的来破解了\u0026hellip;到这的时候我试了一下，但是班长突然打电话然我去取自行车，我就去了~后面的就没有后面了。\n后面的安排 最近项目差不多算是完成了，后面的计划可能要调整一下状态，把RAC再看看，想看看动画，然后，继续开发下一个项目了~","title":"Mac安装Aircrack-ng"},{"content":"FOR CM AND PLUSUB 废话 开发iOS距离一年还有四个月。block的文章看了很多。也在项目中使用了，但是使用率很低，仅限于最最简单的界面传值。\n我最近处于一个深度学习和补作业做实验的阶段(重点是补作业和做实验)，而且经历了两个项目现在对于OC的理解又更进了一步。于是抽时间把之前下载的关于block的视频又翻出来看了一下。有一些感受写出来，以便CM和PLUSUB以后的iOSer可以很快的学习到关于block的使用。以后这样的文章都会在标题加一个FOR CM AND PLUSUB。\n概述 block就是闭包，可以用来回调。\n再简单一点，指向函数的指针。\n我现在只会简单的使用block，下午写了个demo利用block封装了afnetworking然后在另一个界面调用afnetworking的请求。当然不复杂。\n上代码吧，不然再废话都解释不清楚什么是block。\npart1 block的简单定义 我现在定义一个简单的block。 {% highlight objc %} void (^myBlock)(NSString *str);//1 myBlock = ^(NSString *str) { NSLog(@\u0026quot;\u0026mdash;%@\u0026quot;, str);//2 }; myBlock(@\u0026ldquo;11111\u0026rdquo;);//3 // Outputs:\u0026mdash;11111 {% endhighlight %} 可以这么理解，我定义了一个返回值为void类型的block。void后面跟了一个函数，但是这个函数函数名是以^开头的，需要用括号包起来，参数也需要用括号包起来。参数可以是一个int类型，可以是一个NSString类型，还可以是一个函数！可以是多个参数还可以是一个函数。当然如果是int类型的block就需要return一个返回值了。\n然后我们开始对这个void类型的函数进行定义。就是令它等于一个“^+参数”然后里面像定义一个函数一样就行了。 在调用这个block的时候就直接就myBlock加参数就可以了。\n我们可以打断点来看一下整个block的执行顺序。我在代码后面加了标示。\n执行顺序是1 3 2，可以看到myBlock没有按照程序执行的顺序来调用而是在调用之后执行了2的代码。这个例子可能不那么明显，但是可以开始初步理解回调。\npart2 传参block 下面把难度加大一点，我们把block当参数传。然后看一个block的例子。 首先来回顾一个c语言里伟大的typedef，我们开头会利用typedef定义一个block。如果不利用typedef定义一个block，那么函数传参的时候会写很多代码。一会我会详述。 {% highlight objc %} #import \u0026ldquo;ViewController.h\u0026rdquo; typedef void (^MyBlock)(NSString *str);//typedef定义一个block\n@interface ViewController () @end\n@implementation ViewController\n(void)viewDidLoad { [super viewDidLoad]; MyBlock tblock = ^(NSString *str) { NSLog(@\u0026quot;\u0026mdash;\u0026ndash;%@\u0026quot;, str);//1 }; [self testBlock:tblock];//2 } (void)testBlock:(MyBlock)mBlock //如果开始没有用typedef定义的话，此处的函数变为- (void)testBlock:(void(^)(NSString *str))myblock //简单的说格式就是 “返回值 + (^) + 参数 + 名字” { mBlock(@\u0026ldquo;1111\u0026rdquo;);//3 } // Outputs:\u0026mdash;\u0026ndash;1111 {% endhighlight %} 在上面的代码中，我们写了一个testBlock的函数，将我们的tblock作为参数传到了testBlock函数里面，然后再testBlock里用mBlock调用了我们所写的MyBlock这个函数。\n打断点看一下整体的运行流程，2 3 1。这里可以更加明显理解“回调”的含义。\npart3 点击button触发block 经历了上面两个part基本上应该对block有个简单的理解。下面再加一点难度，用按钮触发一个回调来改变按钮的颜色。\n不多解释，直接上代码。 {% highlight objc %} #import \u0026ldquo;ViewController.h\u0026rdquo; typedef void (^MyBlock)(UIColor *color); @interface ViewController () @property (nonatomic, strong) UIButton *testbtn; @end\n@implementation ViewController\n(void)viewDidLoad { [super viewDidLoad]; self.testbtn = [UIButton buttonWithType:UIButtonTypeSystem]; self.testbtn.frame = CGRectMake(0, 0, 200, 40); self.testbtn.backgroundColor = [UIColor greenColor]; [self.view addSubview:self.testbtn]; [self.testbtn addTarget:self action:@selector(testfunc) forControlEvents:UIControlEventTouchUpInside]; } (void)testfunc { MyBlock myblock = ^(UIColor *color) { self.testbtn.backgroundColor = color; }; [self testBlock:myblock]; } (void)testBlock:(MyBlock)myBlock { UIColor *color = [UIColor redColor]; myBlock(color); } {% endhighlight %} part4 利用回调分离afnetwork的请求 直接上代码了。\nTestNetworkViewController是afnetwork使用的地方。 TestViewController是我们需要调用网络请求的地方。 SearchModel是一个model，我用来解析数据的。 {% highlight objc %} // TestNetworkViewController.h #import \u0026lt;UIKit/UIKit.h\u0026gt; #import \u0026ldquo;SearchModel.h\u0026rdquo; typedef void (^GetModel)(SearchModel *model); @interface TestNetworkViewController : UIViewController\n(void)getUrl:(GetModel)getmodel; @end //TestNetworkViewController.m #import \u0026ldquo;TestNetworkViewController.h\u0026rdquo; @interface TestNetworkViewController () @end @implementation TestNetworkViewController\n(void)viewDidLoad { [super viewDidLoad]; } (void)getUrl:(GetModel)getmodel { AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager]; [manager GET:@\u0026ldquo;http://xxx.xx.xxx.xx:xxxx/app/search_haosou\u0026rdquo; parameters:@{@\u0026ldquo;keyword\u0026rdquo;:@\u0026ldquo;android\u0026rdquo;} success:^(AFHTTPRequestOperation *operation, id responseObject) { NSLog(@\u0026ldquo;JSON: %@\u0026rdquo;, responseObject); SearchModel *service = [MTLJSONAdapter modelOfClass:SearchModel.class fromJSONDictionary:responseObject error:nil]; getmodel(service); } failure:^(AFHTTPRequestOperation *operation, NSError *error) { NSLog(@\u0026ldquo;Error: %@\u0026rdquo;, error); }]; } @end // TestViewController.h #import \u0026lt;UIKit/UIKit.h\u0026gt; #import \u0026ldquo;SearchModel.h\u0026rdquo; @interface TestViewController : UIViewController @end\n#import \u0026ldquo;TestViewController.h\u0026rdquo; #import \u0026ldquo;TestNetworkViewController.h\u0026rdquo; #import \u0026ldquo;SearchModel.h\u0026rdquo; @interface TestViewController () @property (nonatomic, strong) SearchModel *test; @end\n@implementation TestViewController\n(void)viewDidLoad { [super viewDidLoad]; // Do any additional setup after loading the view. UIButton *testBtn = [UIButton buttonWithType:UIButtonTypeSystem]; [testBtn setTitle:@\u0026ldquo;test\u0026rdquo; forState:UIControlStateNormal]; [testBtn setTitleColor:[UIColor redColor] forState:UIControlStateNormal]; testBtn.frame = CGRectMake(0, 100, 200, 40); [testBtn addTarget:self action:@selector(getUrl) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:testBtn]; self.view.backgroundColor = [UIColor whiteColor]; } (void)getUrl { [TestNetworkViewController getUrl:^(SearchModel *model) { self.test = model; NSLog(@\u0026quot;\\n\\n\\n\\n%@\u0026quot;, self.test); }]; } {% endhighlight %} 总结 首先还是得说一下我这里只是演示了最最简单的block使用，因为作为一个iOS开发者不会block，那么有一大半的代码是看不懂的，在后面理解RAC的时候也会出现很大的问题。所以这里我只是做了简单的说明，至于在block里为什么不能调用self，自从segmentfault上有人问过之后我答错之后现在也算是理解了一部分了，但是牵扯到了内存回收的问题，我还需要一段时间来消化。消化完之后会继续写博客的。\n总之，block非常的有用，初期写block非常的难过，但是难过过了也就慢慢会喜欢上block的。\npost-credits scene 最近实在是忙的不可开交，一星期两场考试四个实验。还欠了人jobdeer.com一篇博客还没写，人送的书都没时间看。抽时间还要补起来。\n最近博客的更新频率也是大大降低\u0026hellip;唉。都是泪。\n先写到这了。\n","permalink":"http://localhost:1313/posts/my-understand-about-block/","summary":"FOR CM AND PLUSUB 废话 开发iOS距离一年还有四个月。block的文章看了很多。也在项目中使用了，但是使用率很低，仅限于最最简单的界面传值。\n我最近处于一个深度学习和补作业做实验的阶段(重点是补作业和做实验)，而且经历了两个项目现在对于OC的理解又更进了一步。于是抽时间把之前下载的关于block的视频又翻出来看了一下。有一些感受写出来，以便CM和PLUSUB以后的iOSer可以很快的学习到关于block的使用。以后这样的文章都会在标题加一个FOR CM AND PLUSUB。\n概述 block就是闭包，可以用来回调。\n再简单一点，指向函数的指针。\n我现在只会简单的使用block，下午写了个demo利用block封装了afnetworking然后在另一个界面调用afnetworking的请求。当然不复杂。\n上代码吧，不然再废话都解释不清楚什么是block。\npart1 block的简单定义 我现在定义一个简单的block。 {% highlight objc %} void (^myBlock)(NSString *str);//1 myBlock = ^(NSString *str) { NSLog(@\u0026quot;\u0026mdash;%@\u0026quot;, str);//2 }; myBlock(@\u0026ldquo;11111\u0026rdquo;);//3 // Outputs:\u0026mdash;11111 {% endhighlight %} 可以这么理解，我定义了一个返回值为void类型的block。void后面跟了一个函数，但是这个函数函数名是以^开头的，需要用括号包起来，参数也需要用括号包起来。参数可以是一个int类型，可以是一个NSString类型，还可以是一个函数！可以是多个参数还可以是一个函数。当然如果是int类型的block就需要return一个返回值了。\n然后我们开始对这个void类型的函数进行定义。就是令它等于一个“^+参数”然后里面像定义一个函数一样就行了。 在调用这个block的时候就直接就myBlock加参数就可以了。\n我们可以打断点来看一下整个block的执行顺序。我在代码后面加了标示。\n执行顺序是1 3 2，可以看到myBlock没有按照程序执行的顺序来调用而是在调用之后执行了2的代码。这个例子可能不那么明显，但是可以开始初步理解回调。\npart2 传参block 下面把难度加大一点，我们把block当参数传。然后看一个block的例子。 首先来回顾一个c语言里伟大的typedef，我们开头会利用typedef定义一个block。如果不利用typedef定义一个block，那么函数传参的时候会写很多代码。一会我会详述。 {% highlight objc %} #import \u0026ldquo;ViewController.h\u0026rdquo; typedef void (^MyBlock)(NSString *str);//typedef定义一个block\n@interface ViewController () @end\n@implementation ViewController\n(void)viewDidLoad { [super viewDidLoad]; MyBlock tblock = ^(NSString *str) { NSLog(@\u0026quot;\u0026mdash;\u0026ndash;%@\u0026quot;, str);//1 }; [self testBlock:tblock];//2 } (void)testBlock:(MyBlock)mBlock //如果开始没有用typedef定义的话，此处的函数变为- (void)testBlock:(void(^)(NSString *str))myblock //简单的说格式就是 “返回值 + (^) + 参数 + 名字” { mBlock(@\u0026ldquo;1111\u0026rdquo;);//3 } // Outputs:\u0026mdash;\u0026ndash;1111 {% endhighlight %} 在上面的代码中，我们写了一个testBlock的函数，将我们的tblock作为参数传到了testBlock函数里面，然后再testBlock里用mBlock调用了我们所写的MyBlock这个函数。","title":"Block 我所理解的回调"},{"content":"因为上次回学校看见英语老师，他说他电脑慢了\u0026hellip;我具体也没看到他电脑什么情况就赶着回家了。现在我把我最近windows上会用的一些优化方法介绍一下（算不上优化，个人使用习惯）。还会介绍一点我在windows经常使用的软件。unix系操作系统还轻喷。\n本文仅代表个人观点，由于本人技术有限所以只能想到哪说哪，如有得罪还请见谅。如果你是程序员朋友，还请您轻喷这篇文章。如果你是一般用户，选择您觉得适用的参考。 不喜勿喷勿骂。\n优化上，我给别人的意见都是不装360。 因为它捆绑了太多东西，并不是说360不好，确实很影响速度。 不过当年要没有360现在还不知道病毒多疯狂。 如果用360也行，具体参加5。\n如果你是微软官方纯净的windows操作系统只用kms破解的话我觉得杀毒软件和优化软件没有必要使用。\n平常如果用优化软件就经常清理，一定要时常清理！！我就太懒老不清理每次清理完我觉得都快。我一般大概一个月想起来一次吧\u0026hellip;我用的腾讯管家。及时清理就行。有些缓存文件我也不知道在哪怎么删除，但是它能找到删除。\n其他就是一些基本的，桌面上少放点东西及时清理桌面。 还有就是不经常用的软件就及时卸载了，我建议有优化软件的用优化软件卸载。因为清理的相对比较彻底。\n软件的使用上就是同一功能装一个就行，不要装了搜狗输入法再装百度输入法这种。包括优化软件也是这样。包括看视频的。\n电脑上的回收站还是要及时清理，我经常性发现C盘存储量飚红，后来发现是回收站东西太多，你也可以设置一下回收站的回收机制。具体我就不介绍了。\n有一条很重要，下载软件尽量从官方网站下载。如果你从非官方的地方下载，那你最好确认它是从官方网站找的，我一直觉得我们用的office2013其实很不错，虽然是破解的。但是至少给我感觉很正规，安装选项里面东西很齐全。而且确实需要破解才能用。\n最近发现其实内存很影响电脑速度的，尤其我这种喜欢开两个操作系统的。我回来前加了一根4G内存条，现在电脑跑mac的虚拟机基本没有什么太大压力（可惜键盘驱动有问题我的天）。我买的4G内存条好的那种两百多其实感觉还不错。固态硬盘的话，一般我不建议，因为固态硬盘一旦坏了，数据全无。普通硬盘还是可以恢复一部分的。现在制约电脑速度的已经不是cpu了，是硬盘，所以如果电脑慢了，我觉得百分之七八十是电脑装的软件有问题或者有消耗内存的软件在运行。\n迅雷的话，我用的是迅雷出的那一款极速版，就只有下载，没有其他的什么广告之类的我觉得还不错。而且如果你电脑上有播放器的话其实没有必要安装迅雷看看什么的。参见5。\n注意右下角的状态栏，一般来说除了系统自带的那些这个显卡那个声卡电源无线网输入法之类的。如果你看到没有什么用的及时关了，这个很影响速度。\n如果你觉得你可以，我强烈建议你在卡的时候打开任务管理器，看一下内存使用情况和软件使用情况。遇到感觉有问题的就百度一下。一定不要乱关，有把握了再结束任务。比如我用的VMware，至今不知道为什么会有后台运行。\n还有一点。安装操作系统，我强烈建议从微软官方的下载光盘镜像来安装操作系统，安装最纯净的操作系统。安装之后kms破解或者买序列号都行。我给我妈的电脑安装的是win7 32位正版操作系统，是学校发的正版序列号和微软官方的镜像。开机有点卡，不过运行起来速度还不错。2G的内存。应该用了至少七八年了吧。去年暑假重装的，我只给她装了火狐和腾讯管家和office2013。我刚刚给老妈装了prezi，然后上网查了点资料，速度还很快。她说就开机慢\u0026hellip;开机慢是win7操作系统的问题，win8在很多地方都优化了现在速度还很不错。\n大概就只能想到这么多，基本就几条，少装重复功能的软件，多清理电脑缓存和回收站。\n下面推荐几款软件。\n浏览器：火狐或者chrome或者ie，不推荐360，装了360就用着也没啥哈。\n办公软件：office2013 强推 十分好用 百度一下有一个下载下来是iso文件和kms破解的，特别好用，iso文件打开方式就是解压缩就行了。\npdf阅读：adobe reader其实不错，但是一个朋友给我推荐了一款Sumatra PDF，免费开源，而且轻量级，我觉得还不错哈。\n听歌：网易云音乐这个没有任何异议。我知道很多人用酷狗和qq，你尝试一下就会用网易了，它会根据你听的歌给你推荐歌，推荐的神准，简直了！！良心推荐。\n下载软件：我用的是迅雷极速版，没有广告没有插件我觉得还不错\n视频播放器：我用的QQ影音，理由是没有广告，个人比较喜欢下载下来看。\n","permalink":"http://localhost:1313/posts/somethingaboutwindows/","summary":"因为上次回学校看见英语老师，他说他电脑慢了\u0026hellip;我具体也没看到他电脑什么情况就赶着回家了。现在我把我最近windows上会用的一些优化方法介绍一下（算不上优化，个人使用习惯）。还会介绍一点我在windows经常使用的软件。unix系操作系统还轻喷。\n本文仅代表个人观点，由于本人技术有限所以只能想到哪说哪，如有得罪还请见谅。如果你是程序员朋友，还请您轻喷这篇文章。如果你是一般用户，选择您觉得适用的参考。 不喜勿喷勿骂。\n优化上，我给别人的意见都是不装360。 因为它捆绑了太多东西，并不是说360不好，确实很影响速度。 不过当年要没有360现在还不知道病毒多疯狂。 如果用360也行，具体参加5。\n如果你是微软官方纯净的windows操作系统只用kms破解的话我觉得杀毒软件和优化软件没有必要使用。\n平常如果用优化软件就经常清理，一定要时常清理！！我就太懒老不清理每次清理完我觉得都快。我一般大概一个月想起来一次吧\u0026hellip;我用的腾讯管家。及时清理就行。有些缓存文件我也不知道在哪怎么删除，但是它能找到删除。\n其他就是一些基本的，桌面上少放点东西及时清理桌面。 还有就是不经常用的软件就及时卸载了，我建议有优化软件的用优化软件卸载。因为清理的相对比较彻底。\n软件的使用上就是同一功能装一个就行，不要装了搜狗输入法再装百度输入法这种。包括优化软件也是这样。包括看视频的。\n电脑上的回收站还是要及时清理，我经常性发现C盘存储量飚红，后来发现是回收站东西太多，你也可以设置一下回收站的回收机制。具体我就不介绍了。\n有一条很重要，下载软件尽量从官方网站下载。如果你从非官方的地方下载，那你最好确认它是从官方网站找的，我一直觉得我们用的office2013其实很不错，虽然是破解的。但是至少给我感觉很正规，安装选项里面东西很齐全。而且确实需要破解才能用。\n最近发现其实内存很影响电脑速度的，尤其我这种喜欢开两个操作系统的。我回来前加了一根4G内存条，现在电脑跑mac的虚拟机基本没有什么太大压力（可惜键盘驱动有问题我的天）。我买的4G内存条好的那种两百多其实感觉还不错。固态硬盘的话，一般我不建议，因为固态硬盘一旦坏了，数据全无。普通硬盘还是可以恢复一部分的。现在制约电脑速度的已经不是cpu了，是硬盘，所以如果电脑慢了，我觉得百分之七八十是电脑装的软件有问题或者有消耗内存的软件在运行。\n迅雷的话，我用的是迅雷出的那一款极速版，就只有下载，没有其他的什么广告之类的我觉得还不错。而且如果你电脑上有播放器的话其实没有必要安装迅雷看看什么的。参见5。\n注意右下角的状态栏，一般来说除了系统自带的那些这个显卡那个声卡电源无线网输入法之类的。如果你看到没有什么用的及时关了，这个很影响速度。\n如果你觉得你可以，我强烈建议你在卡的时候打开任务管理器，看一下内存使用情况和软件使用情况。遇到感觉有问题的就百度一下。一定不要乱关，有把握了再结束任务。比如我用的VMware，至今不知道为什么会有后台运行。\n还有一点。安装操作系统，我强烈建议从微软官方的下载光盘镜像来安装操作系统，安装最纯净的操作系统。安装之后kms破解或者买序列号都行。我给我妈的电脑安装的是win7 32位正版操作系统，是学校发的正版序列号和微软官方的镜像。开机有点卡，不过运行起来速度还不错。2G的内存。应该用了至少七八年了吧。去年暑假重装的，我只给她装了火狐和腾讯管家和office2013。我刚刚给老妈装了prezi，然后上网查了点资料，速度还很快。她说就开机慢\u0026hellip;开机慢是win7操作系统的问题，win8在很多地方都优化了现在速度还很不错。\n大概就只能想到这么多，基本就几条，少装重复功能的软件，多清理电脑缓存和回收站。\n下面推荐几款软件。\n浏览器：火狐或者chrome或者ie，不推荐360，装了360就用着也没啥哈。\n办公软件：office2013 强推 十分好用 百度一下有一个下载下来是iso文件和kms破解的，特别好用，iso文件打开方式就是解压缩就行了。\npdf阅读：adobe reader其实不错，但是一个朋友给我推荐了一款Sumatra PDF，免费开源，而且轻量级，我觉得还不错哈。\n听歌：网易云音乐这个没有任何异议。我知道很多人用酷狗和qq，你尝试一下就会用网易了，它会根据你听的歌给你推荐歌，推荐的神准，简直了！！良心推荐。\n下载软件：我用的是迅雷极速版，没有广告没有插件我觉得还不错\n视频播放器：我用的QQ影音，理由是没有广告，个人比较喜欢下载下来看。","title":"windows电脑的使用和优化杂谈"}]